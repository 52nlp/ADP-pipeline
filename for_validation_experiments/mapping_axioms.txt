; DISEASE 

;(B (name disease)(=> (^(M#CAUSE-NOT-FUNCTION e0 :0.3)(M#THING-CAUSING-NOT-FUNCTION x e0 :0.3)(M#FUNCTION-AGENT y e0 :0.3)) (^ (I#DISEASE x)(I#DISEASE%TYPE x x)(R#SICK y x))))
(B (name disease) (=> (^(M#CAUSE-NOT-FUNCTION e0 :0.45)(M#THING-NOT-FUNCTIONING y e0 :0.45)) (^(I#DISEASE%TYPE x e0)(R#SICK y e0))))
(B (name disease2) (=> (M#CAUSE-NOT-FUNCTION x :0.9) (I#DISEASE%TYPE x e0)))

;(B (name cure)(=> (^(M#CAUSE-NOT-EXIST e1 :0.3)(M#THING-CAUSING-NOT-EXIST y e1 :0.3)(M#EXISTING-THING x e1 :0.3)) (^(I#DISEASE%CURE e0 e0)(R#CURE-AGENT y e0)(R#SICK x d)(S#DISEASE d))))
(B (name cure)(=> (^(M#CAUSE-NOT-EXIST e0 :0.45)(M#THING-CAUSING-NOT-EXIST x e0 :0.45)) (^(I#DISEASE e0) (I#DISEASE%CURE e0 e0)(R#CURE-AGENT x e0))))
(B (name cure2)(=> (^(M#CAUSE-NOT-EXIST e0 :0.3)(M#THING-CAUSING-NOT-EXIST x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3)) (^(I#DISEASE e0) (I#DISEASE%CURE e0 e0)(R#CURE-AGENT x e0)(R#CURE-PATIENT y e0))))

(B (name treatment)(=> (^(M#CAUSE-PROBLEM-NOT-EXIST e0 :0.3)) (^(I#DISEASE%TREATMENT e0 e0))))


; STRUGGLE 

(B (name fight)(=>(^(M#CAUSE-NOT-EXIST x e0 :0.1)(M#THING-CAUSING-NON-EXISTENCE z e0 :0.1)(M#THING-NOT-EXISTING y e0 :0.1))(^(I#STRUGGLE%TYPE x e0)(R#STRUGGLE-PATIENT y x)(R#STRUGGLE-AGENT z x))))
(B (name fight2)(=>(^(M#CAUSE-NOT-EXIST x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3))(^(I#STRUGGLE%TYPE x e0)(R#STRUGGLE-TARGET y x))))

(B (name weapon2)(=> (^(M#CAUSE-NOT-EXIST x e0 :0.1)(M#THING-NOT-EXISTING y x :0.1)) (^(I#STRUGGLE%WEAPON x e0)(R#WEAPON-TARGET y x))))

(B (name enemy)(=> (^(M#CAUSE-NOT-FUNCTION e1 :0.3)(M#THING-CAUSING-NOT-FUNCTION x e1 :0.3)(M#FUNCTION-AGENT z e1 :0.3)) (^ (I#STRUGGLE-ADVERSARY x e0)(R#STRUGGLE-AGENT z e0))))
(B (name enemy2)(=> (^(M#CAUSE-NOT-FUNCTION e1 :0.45)(M#THING-CAUSING-NOT-FUNCTION x e1 :0.45)) (I#STRUGGLE-ADVERSARY x e0)))


; CRIME 

(B (name crime)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.3)(M#AGAINST-SOCIETY-ACTOR x e0 :0.3)(M#AGAINST-SOCIETY-ACTION-VICTIM y e0 :0.3)) (^(I#CRIME x)(R#CRIME-AGENT x e0)(R#CRIME-VICTIM y e0))))
(B (name crime2)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTOR x e0 :0.45)) (^(I#CRIME e0)(R#CRIME-AGENT x e0))))
(B (name crime3)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTION-VICTIM y e0 :0.45)) (^(I#CRIME e0)(R#CRIME-VICTIM y e0))))
(B (name crime4)(=> (M#AGAINST-SOCIETY-ACTION e0 x :0.9) (I#CRIME%TYPE x e0)))
(B (name crime-perpetrator)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTOR x e0 :0.45)) (^(I#CRIME%PERPETRATOR x e0))))

; ABYSS
(B (name abyss) (=>(^(M#CAUSE-NOT-FUNCTION e0 :0.23)(M#THING-CAUSING-NOT-FUNCTION e0 x :0.23)(M#CAUSE-LIMIT-OPTIONS e0 :0.23)(M#THING-CAUSING-LIMIT-OPTIONS x e0 :0.23)) (I#ABYSS%TYPE e0)))

; ABYSS-EXIT
(B (name abyss-exit) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-INCREASE-OPTIONS e0 :0.45)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0))))

;(B (name abyss-exit2) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-INCREASE-OPTIONS e0 :0.45)(M#CAUSING-THING-RF x e0 :0.45)(THING-CAUSING-INCREASED-OPTIONS)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0) (R#ABYSS-EXIT-CAUSE x e0))))
(B (name abyss-exit3) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.23) (M#CAUSE-INCREASE-OPTIONS e0 :0.23)(M#THING-THAT-LIMITED-OPTIONS z :0.23)(M#THING-THAT-STOPPED-FUNCTION z :0.23)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0) (R#ABYSS-THEME z e))))

; ABYSS-DEEP
;(B (name deep) (=> (^(M#CAUSE-SEVERE-NOT-FUNCTION e0 :0.23) (M#THING-CAUSING-NOT-FUNCTION e0 x :0.23) (M#CAUSE-SEVERE-REDUCE-OPTIONS e0 :0.23) (M#THING-CAUSING-LIMIT-OPTIONS e0 x :0.23)) (I#ABYSS%DEPTH e0 x)))
(B (name deep) (=> (^(M#CAUSE-SEVERE-NOT-FUNCTION e0 :0.23) (M#CAUSE-SEVERE-REDUCE-OPTIONS e0 :0.23)) (I#ABYSS%DEPTH e0 x)))

; CROP
(B (name crop) (=>(M#CAUSE-OUTCOME-OF-ACTION x :0.9) (I#CROP%TYPE x e0)))
(B (name crop2) (=>(^(M#CAUSE-OUTCOME-OF-ACTION x :0.45)(M#OUTCOME-OF-ACTION y :0.45)) (^(I#CROP%TYPE x e0)(R#CROP-OUTCOME y e0))))

(B (name seed) (=>(M#PREPARATION-FOR-OUTCOME x :0.8) (I#CROP%SEED x e0)))

(B (name harvest_crop) (=>(^(M#CAUSE-REALIZE-OUTCOME e0 u :0.3)(M#THING-REALIZING x e1 :0.3) (M#CAUSE-OUTCOME-OF-ACTION y e2 :0.3)) (^(I#CROP%CULTIVATION e0 u)(R#GROW-AGENT x e1) (R#GROW-PATIENT y e2))))

(B (name grow_crop) (=>(^(M#CAUSE-INCREASE-AMOUNT e0 :0.45)(M#THING-INCREASING x e0 :0.45)) (^(I#CROP%CULTIVATION e0 e0)(R#GROWER x e0))))

(B (name remove_crop) (=>(^(M#CAUSE-NOT-EXIST e0 :0.3)(M#THING-CAUSING-NON-EXISTENCE x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3)) (^(I#CROP%REMOVAL e0 e0)(R#REMOVER x e0)(R#REMOVE-PATIENT y e0))))

;PRICE 
(B (name price) (=>(M#CAUSE-NEGATIVE-CONSEQUENCE-OF-DESIRED-THING x :0.9) (^(I#PRICE%TYPE x e0))))
(B (name price2) (=>(^(M#CAUSE-NEGATIVE-CONSEQUENCE-OF-DESIRED-THING x :0.45)(M#THING-DESIRED y e0 :0.45)) (^(I#PRICE%TYPE x e0)(R#PRICE-REWARD y e0))))
(B (name pay) (=>(^(M#CAUSE-EXCHANGE-NEGATIVE-POSITIVE x :0.45)(M#THING-DESIRED y e0 :0.45)) (^(I#PRICE%PAYMENT x e0)(R#PRICE-REWARD y e1))))

;COST
(B (name cost) (=>(^(M#CAUSE-DRAIN-RESOURCES x :0.45)(M#THING-DRAINING y e0 :0.45)) (^(I#COST%TYPE x e0)(R#COST-CAUSE y e0))))

;PHYSICAL-LOCATION

(B (name physical-location) (=>(^(M#CAUSE-EXPERIENCE-SOMETHING e0 e0 :0.1)(M#THING-EXPERIENCED y e0 :0.1)(M#EXPERIENCER x e0 :0.1)) (^(I#PHYSICAL-LOCATION e0)(R#REGION y e0)(R#LOCATION-AGENT x e0))))



;VIOLENCE
(B (name violence) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.45)(M#THING-CAUSING-NOT-FUNCTION x e0 :0.45)) (^(I#VIOLENCE e0)(I#VIOLENCE%TYPE x e0))))

;TERRORISM
(B (name terrorism) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.45)(M#THING-CAUSING-NOT-FUNCTION y e0 :0.45)) (^(I#TERRORISM e0)(I#TERRORISM%TYPE x e0)(R#TERRORIZE-AGENT y e0))))

(B (name terrorism2) (=> (M#CAUSE-NOT-FUNCTION x e0 :0.9) (I#TERRORISM%TYPE x e0)))



;RESOURCE
(B (name resource) (=> (^(M#CAUSE-FUNCTION x e0 :0.9)) (^(I#RESOURCE e0)(I#RESOURCE%TYPE x e0))))
