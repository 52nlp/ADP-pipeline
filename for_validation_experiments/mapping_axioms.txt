; DISEASE 

;(B (name disease)(=> (^(M#CAUSE-NOT-FUNCTION e0 :0.3)(M#THING-CAUSING-NOT-FUNCTION x e0 :0.3)(M#FUNCTION-AGENT y e0 :0.3)) (^ (I#DISEASE x)(I#DISEASE%TYPE x x)(R#SICK y x))))
(B (name disease) (=> (^(M#CAUSE-NOT-FUNCTION e0 :0.45)(M#THING-NOT-FUNCTIONING y e0 :0.45)) (^(I#DISEASE%TYPE x e0)(R#SICK y e0))))
(B (name disease2) (=> (M#CAUSE-NOT-FUNCTION x :0.9) (I#DISEASE%TYPE x e0)))

;(B (name cure)(=> (^(M#CAUSE-NOT-EXIST e1 :0.3)(M#THING-CAUSING-NOT-EXIST y e1 :0.3)(M#EXISTING-THING x e1 :0.3)) (^(I#DISEASE%CURE e0 e0)(R#CURE-AGENT y e0)(R#SICK x d)(S#DISEASE d))))
(B (name cure)(=> (^(M#CAUSE-NOT-EXIST e0 :0.45)(M#THING-CAUSING-NOT-EXIST x e0 :0.45)) (^(I#DISEASE e0) (I#DISEASE%CURE e0 e0)(R#CURE-AGENT x e0))))
(B (name cure2)(=> (^(M#CAUSE-NOT-EXIST e0 :0.3)(M#THING-CAUSING-NOT-EXIST x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3)) (^(I#DISEASE e0) (I#DISEASE%CURE e0 e0)(R#CURE-AGENT x e0)(R#CURE-PATIENT y e0))))

(B (name treatment)(=> (^(M#CAUSE-PROBLEM-NOT-EXIST e0 :0.3)) (^(I#DISEASE%TREATMENT e0 e0))))


; STRUGGLE 

(B (name fight)(=>(^(M#CAUSE-NOT-EXIST x e0 :0.1)(M#THING-CAUSING-NON-EXISTENCE z e0 :0.1)(M#THING-NOT-EXISTING y e0 :0.1))(^(I#STRUGGLE%TYPE x e0)(R#STRUGGLE-PATIENT y x)(R#STRUGGLE-AGENT z x))))
(B (name fight2)(=>(^(M#CAUSE-NOT-EXIST x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3))(^(I#STRUGGLE%TYPE x e0)(R#STRUGGLE-TARGET y x))))

(B (name weapon2)(=> (^(M#CAUSE-NOT-EXIST x e0 :0.1)(M#THING-NOT-EXISTING y x :0.1)) (^(I#STRUGGLE%WEAPON x e0)(R#WEAPON-TARGET y x))))

(B (name enemy)(=> (^(M#CAUSE-NOT-FUNCTION e1 :0.3)(M#THING-CAUSING-NOT-FUNCTION x e1 :0.3)(M#FUNCTION-AGENT z e1 :0.3)) (^ (I#STRUGGLE-ADVERSARY x e0)(R#STRUGGLE-AGENT z e0))))
(B (name enemy2)(=> (^(M#CAUSE-NOT-FUNCTION e1 :0.45)(M#THING-CAUSING-NOT-FUNCTION x e1 :0.45)) (I#STRUGGLE-ADVERSARY x e0)))


; CRIME 

(B (name crime)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.3)(M#AGAINST-SOCIETY-ACTOR x e0 :0.3)(M#AGAINST-SOCIETY-ACTION-VICTIM y e0 :0.3)) (^(I#CRIME x)(R#CRIME-AGENT x e0)(R#CRIME-VICTIM y e0))))
(B (name crime2)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTOR x e0 :0.45)) (^(I#CRIME e0)(R#CRIME-AGENT x e0))))
(B (name crime3)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTION-VICTIM y e0 :0.45)) (^(I#CRIME e0)(R#CRIME-VICTIM y e0))))
(B (name crime4)(=> (M#AGAINST-SOCIETY-ACTION e0 x :0.9) (I#CRIME%TYPE x e0)))
(B (name crime-perpetrator)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTOR x e0 :0.45)) (^(I#CRIME%PERPETRATOR x e0))))

; ABYSS
(B (name abyss) (=>(^(M#CAUSE-NOT-FUNCTION e0 :0.23)(M#THING-CAUSING-NOT-FUNCTION e0 x :0.23)(M#CAUSE-LIMIT-OPTIONS e0 :0.23)(M#THING-CAUSING-LIMIT-OPTIONS x e0 :0.23)) (I#ABYSS%TYPE e0)))

; ABYSS-EXIT
(B (name abyss-exit) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-INCREASE-OPTIONS e0 :0.45)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0))))

;(B (name abyss-exit2) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-INCREASE-OPTIONS e0 :0.45)(M#CAUSING-THING-RF x e0 :0.45)(THING-CAUSING-INCREASED-OPTIONS)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0) (R#ABYSS-EXIT-CAUSE x e0))))
(B (name abyss-exit3) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.23) (M#CAUSE-INCREASE-OPTIONS e0 :0.23)(M#THING-THAT-LIMITED-OPTIONS z :0.23)(M#THING-THAT-STOPPED-FUNCTION z :0.23)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0) (R#ABYSS-THEME z e))))

; ABYSS-DEEP
;(B (name deep) (=> (^(M#CAUSE-SEVERE-NOT-FUNCTION e0 :0.23) (M#THING-CAUSING-NOT-FUNCTION e0 x :0.23) (M#CAUSE-SEVERE-REDUCE-OPTIONS e0 :0.23) (M#THING-CAUSING-LIMIT-OPTIONS e0 x :0.23)) (I#ABYSS%DEPTH e0 x)))
(B (name deep) (=> (^(M#CAUSE-SEVERE-NOT-FUNCTION e0 :0.23) (M#CAUSE-SEVERE-REDUCE-OPTIONS e0 :0.23)) (I#ABYSS%DEPTH e0 x)))

; CROP
(B (name crop) (=>(M#CAUSE-OUTCOME-OF-ACTION x :0.9) (I#CROP%TYPE x e0)))
(B (name crop2) (=>(^(M#CAUSE-OUTCOME-OF-ACTION x :0.45)(M#OUTCOME-OF-ACTION y :0.45)) (^(I#CROP%TYPE x e0)(R#CROP-OUTCOME y e0))))

(B (name seed) (=>(M#PREPARATION-FOR-OUTCOME x :0.8) (I#CROP%SEED x e0)))

(B (name harvest_crop) (=>(^(M#CAUSE-REALIZE-OUTCOME e0 u :0.3)(M#THING-REALIZING x e1 :0.3) (M#CAUSE-OUTCOME-OF-ACTION y e2 :0.3)) (^(I#CROP%CULTIVATION e0 u)(R#GROW-AGENT x e1) (R#GROW-PATIENT y e2))))

(B (name grow_crop) (=>(^(M#CAUSE-INCREASE-AMOUNT e0 :0.45)(M#THING-INCREASING x e0 :0.45)) (^(I#CROP%CULTIVATION e0 e0)(R#GROWER x e0))))

(B (name remove_crop) (=>(^(M#CAUSE-NOT-EXIST e0 :0.3)(M#THING-CAUSING-NON-EXISTENCE x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3)) (^(I#CROP%REMOVAL e0 e0)(R#REMOVER x e0)(R#REMOVE-PATIENT y e0))))

;PRICE 
(B (name price) (=>(M#CAUSE-NEGATIVE-CONSEQUENCE-OF-DESIRED-THING x :0.9) (^(I#PRICE%TYPE x e0))))
(B (name price2) (=>(^(M#CAUSE-NEGATIVE-CONSEQUENCE-OF-DESIRED-THING x :0.45)(M#THING-DESIRED y e0 :0.45)) (^(I#PRICE%TYPE x e0)(R#PRICE-REWARD y e0))))
(B (name pay) (=>(^(M#CAUSE-EXCHANGE-NEGATIVE-POSITIVE x :0.45)(M#THING-DESIRED y e0 :0.45)) (^(I#PRICE%PAYMENT x e0)(R#PRICE-REWARD y e1))))

;COST
(B (name cost) (=>(^(M#CAUSE-DRAIN-RESOURCES x :0.45)(M#THING-DRAINING y e0 :0.45)) (^(I#COST%TYPE x e0)(R#COST-CAUSE y e0))))

;PHYSICAL-LOCATION

(B (name physical-location) (=>(^(M#CAUSE-EXPERIENCE-SOMETHING e0 e0 :0.1)(M#THING-EXPERIENCED y e0 :0.1)(M#EXPERIENCER x e0 :0.1)) (^(I#PHYSICAL-LOCATION e0)(R#REGION y e0)(R#LOCATION-AGENT x e0))))



;VIOLENCE
(B (name violence) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.45)) (I#VIOLENCE%TYPE x e0)))
(B (name violence) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.45)(M#THING-CAUSING-NOT-FUNCTION x e0 :0.45)) (^(I#VIOLENCE%TYPE e0 e0)(R#VIOLENT x e0))))

;TERRORISM
(B (name terrorism) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.45)(M#THING-CAUSING-NOT-FUNCTION y e0 :0.45)) (^(I#TERRORISM%TYPE x e0)(R#TERRORIZE-AGENT y e0))))

(B (name terrorism2) (=> (M#CAUSE-NOT-FUNCTION x e0 :0.9) (I#TERRORISM%TYPE x e0)))



;RESOURCE
(B (name resource) (=> (^(M#CAUSE-FUNCTION x e0 :0.9)) (I#RESOURCE%TYPE x e0)))

;POWER
(B (name rule) (=> (^(M#PROVIDE-CONTROL x e0 :0.9)) (I#POWER%COMMAND x e0)))

(B (name power) (=> (^(M#PROVIDE-CONTROL x e0 :0.9)) (I#POWER%TYPE x e0)))

;VICTORY
(B (name victory) (=> (^(M#ACHIEVEMENT-OF-GOAL x e0 :0.9)) (I#VICTORY%TYPE x e0)))


;PROTECTION
(B (name protect) (=> (^(M#CAUSE-ALLOW-FUNCTION e0 e0 :0.3)(M#THING-ALLOWING x e0 :0.3)(M#THING-FUNCTIONING y e0 :0.3)) (^(I#SECURITY%TYPE e0 e0)(R#PROTECT-AGENT x e0)(R#PROTECT-PATIENT y e0))))

(B (name security) (=> (^(M#CAUSE-ALLOW-FUNCTION x e0 :0.9)) (I#SECURITY%TYPE x e0)))

;WATER
(B (name water)(=> (M#LARGE-AMOUNT x e0 :0.8) (I#WATER%TYPE x e0)))
(B (name body_of_water)(=> (^(M#LARGE-AMOUNT x e0 :0.45)(M#THING-LARGE-AMOUNT y e0 :0.45)) (^(I#WATER%TYPE x e0)(R#WATER-COMPARISON y e0))))

; MOVEMENT
(B (name water-movement) (=>(^(M#LIQUID-MOVE-FREELY e0 :0.3)(M#LIQUID-THING x :0.3))  (^(I#WATER%MOVEMENT e0 y)(R#STREAMING x e0))))
(B (name water-movement2) (=>(^(M#LIQUID-MOVE-FREELY x :0.3)(M#LIQUID-THING y :0.3))  (^(I#WATER%MOVEMENT x e0)(R#STREAMING y e0))))


;BODY
(B (name body)(=> (^ (M#LARGE-AMOUNT x e0 :0.1)(M#THING-LARGE-AMOUNT y e0 :0.1)) (^(I#BODY%TYPE x e0)(R#BODY-COMPARISON y e0))))
;(B (name hand)(=> (M#CAUSE-LOSE-SELF-CONTROL x e0 :0.8) (^(I#BODY%PART x e0)(R#HAND x e0))))
(B (name head)(=> (M#INDICATE-IMPORTANCE x e0 :0.8) (^(I#BODY%PART x e0)(R#HEAD x e0))))
(B (name handof)(=> (^(M#CAUSE-LOSE-SELF-CONTROL x e0 :0.45)(M#THING-GAINING-CONTROL y e0 :0.45)) (^(I#BODY%PART x e0)(R#HAND x e0)(R#CONTROLLER y e0))))



;FOOD
(B (name eat)(=> (^(M#CAUSE-NOT-EXIST e0 :0.3)(M#THING-CAUSING-NOT-EXIST x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3)) (^(I#FOOD%CONSUMPTION e0 e0)(R#EAT-AGENT x e0) (R#EAT-OBJECT y e0))))

(B (name taste)(=> (^(M#CAUSE-EXPERIENCE e0 :0.3)(M#THING-CAUSING-EXPERIENCE x e0 :0.3)(M#THING-BEING-EXPERIENCED y e0 :0.3)) (^(I#FOOD%TASTE e0 e0)(R#TASTE-AGENT x e0) (R#TASTE-OBJECT y e0))))

(B (name taste)(=> (^(M#CAUSE-EXPERIENCE x e0 :0.3)(M#THING-BEING-EXPERIENCED y e0 :0.3)) (^(I#FOOD%TASTE x e0)(R#TASTE-OBJECT y e0))))

;BLOOD
(B (name blood) (=> (^(M#CAUSE-FUNCTION x e0 :0.9)) (I#BLOOD%COMPONENT x e0)))
(B (name blood-of) (=> (^(M#CAUSE-FUNCTION x e0 :0.45)(M#THING-FUNCTIONING y e0 :0.45)) (^(I#BLOOD%COMPONENT x e0)(R#BLOOD-RECEIVER y e0))))

;DRUG
(B (name drug) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.45)(M#CAUSE-BAD-JUDGEMENT x e0 :0.45)) (I#DRUG%TYPE x e0)))

(B (name addicted) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.3)(M#CAUSE-BAD-JUDGEMENT x e0 :0.3)(M#CAUSE-OBSESSION x e0 :0.3)) (I#DRUG%ADDICTION x e0)))

(B (name drunk) (=> (^(M#HAS-BAD-JUDGEMENT x e0 :0.45)(M#THING-NOT-FUNCTIONING x e0 :0.45)) (^(I#DRUG%EFFECT e0 e0)(R#UNDER-INFLUENCE x e0))))

(B (name drunk2) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.45)(M#CAUSE-BAD-JUDGEMENT x e0 :0.45)) (I#DRUG%EFFECT x e0)))

;GAME
(B (name game-of)(=> (^(M#CAUSE-BINARY-OUTCOME x e0 :0.3)(M#GAME-STAKES y e0 :0.3)) (^(I#GAME%TYPE x e0)(R#GAME-THING y e0))))
(B (name game)(=> (^(M#CAUSE-BINARY-OUTCOME x e0 :0.3)) (^(I#GAME%TYPE x e0))))

(B (name play)(=> (^(M#CAUSE-ATTEMPT-POSITIVE-OUTCOME x e0 :0.1)(M#ATTEMPT-AGENT y e0 :0.1)) (^(I#GAME%ACTIONS x e0)(R#PLAYER y e0))))

(B (name play)(=> (^(M#CAUSE-ATTEMPT-POSITIVE-OUTCOME x e0 :0.9)) (^(I#GAME%ACTIONS x e0))))

(B (name win)(=> (^(M#CAUSE-ATTAIN-POSITIVE-OUTCOME x e0 :0.3)(M#WIN-AGENT y e0 :0.3)) (^(I#GAME%OUTCOMES x e0)(R#PLAYER y e0))))

;FEAR 
;(B (name fear) (=> (M#CAUSE-NOT-FUNCTION x :0.9) (I#FEAR%TYPE x e0)))
(B (name fear) (=> (^(M#CAUSE-NOT-FUNCTION x :0.45)(M#INDICATE-DANGER x :0.45)) (I#FEAR%TYPE x e0)))

;DEATH
(B (name death) (=> (M#CAUSE-NOT-FUNCTION x :0.9) (I#DEATH%TYPE x e0)))

;PAIN
(B (name pain) (=> (^(M#CAUSE-NOT-FUNCTION x :0.45)(M#INDICATE-DISEASE x :0.45)) (I#DISEASE%SYMPTOMS x e0)))

;DESPAIR
(B (name despair) (=> (M#CAUSE-LOSE-HOPE-OF-IMPROVEMENT x :0.9) (I#DESPAIR%TYPE x e0)))

;FREEDOM
(B (name freedom) (=> (M#ALLOW-INDEPENDENT-FUNCTION x :0.9) (I#CONFINEMENT-EXIT x e0)))
(B (name freedom2) (=> (^(M#ALLOW-INDEPENDENT-FUNCTION e0 u :0.1)(M#INDEPENDENT-AGENT x e0 :0.1)) (^(I#CONFINEMENT-EXIT e0 u)(R#ESCAPE-AGENT x e0))))

;GOD
(B (name god) (=> (M#MOST-IMPORTANT x :0.9) (I#A-GOD%TYPE x e0)))
(B (name worship) (=> (^(M#CONSIDER-MOST-IMPORTANT e0 :0.45)(M#CONSIDERING-AGENT x :0.45)) (^(I#VENERATION e0 e0)(R#WORSHIP-AGENT))))
(B (name god) (=> (M#PLACE-OF-IMPORTANCE x :0.9) (I#VENERATION x e0)))
