;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;LMS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; TERRORISM
(B (name terrorism) (=>(^(S#TERRORISM e0 :0.45)(SS#TERRORISM%TYPE x e0 :0.45))(terrorism-nn e0 x)))
(B (name terrorize) (=>(^(S#TERRORISM e0 :0.23)(SS#TERRORISM%TYPE e0 e0 :0.23)(R#TERRORIZE-AGENT x e0 :0.23)(R#TERRORIZE-PATIENT y e0 :0.23))(terrorize-vb e0 x y z)))

(B (name terrorismmap)(=>(I#TERRORISM x :0.9)(S#TERRORISM x)))
(B (name terrorism-typemap)(=>(I#TERRORISM%TYPE x e0 :0.9)(SS#TERRORISM%TYPE x e0)))


; VIOLENCE
(B (name violence) (=>(^(S#VIOLENCE e0 :0.45)(SS#VIOLENCE%TYPE x e0 :0.45))(violence-nn e0 x)))
(B (name violent) (=>(^(S#VIOLENCE e0 :0.3)(SS#VIOLENCE%TYPE e0 e0 :0.3)(R#VIOLENT x e0 :0.3))(violent-adj e0 x)))

(B (name violencemap)(=>(I#VIOLENCE x :0.9)(S#VIOLENCE x)))
(B (name violence-typemap)(=>(I#VIOLENCE%TYPE x e0 :0.9)(SS#VIOLENCE%TYPE x e0)))

; PHYSICAL-LOCATION
(B (name live-in)(=>(^(S#PHYSICAL-LOCATION e0 :0.23)(SS#PHYSICAL-LOCATION%DEFINED-REGION e0 e0 :0.23)(R#LOCATION-AGENT x e0 :0.23)(R#REGION w e0 :0.23)) (^(live-vb e0 x y z)(in-in e1 e0 w)(TS#POVERTY w))))

(B (name physical-locationmap)(=>(I#PHYSICAL-LOCATION x :0.9)(S#PHYSICAL-LOCATION x)))
(B (name physical-location-defined-regionmap)(=>(I#PHYSICAL-LOCATION%DEFINED-REGION x e0 :0.9)(SS#PHYSICAL-LOCATION%DEFINED-REGION x e0)))


; STRUGGLE
(B (name war) (=>(^(S#STRUGGLE e0 :0.45)(SS#STRUGGLE%TYPE x e0 :0.45))(war-nn e0 x)))
(B (name fight) (=>(^(S#STRUGGLE u :0.45)(SS#STRUGGLE%TYPE x e0 :0.45))(fight-nn e0 x)))
(B (name combat) (=>(^(S#STRUGGLE e0 :0.45)(SS#STRUGGLE%TYPE x e0 :0.45))(combat-nn e0 x)))

(B (name combat) (=>(^(S#STRUGGLE e0 :0.23) (SS#STRUGGLE%TYPE e0 e0 :0.23)(R#STRUGGLE-AGENT x e0 :0.23)(R#STRUGGLE-PATIENT y e0 :0.23))(combat-vb e0 x y z)))
(B (name conquer) (=>(^(S#STRUGGLE e0 :0.23) (SS#STRUGGLE%TYPE e0 e0 :0.23)(R#STRUGGLE-AGENT x e0 :0.23)(R#STRUGGLE-PATIENT y e0 :0.23))(conquer-vb e0 x y z)))
(B (name fight) (=>(^(S#STRUGGLE e0 :0.23) (SS#STRUGGLE%TYPE e0 e0 :0.23)(R#STRUGGLE-AGENT x e0 :0.23)(R#STRUGGLE-PATIENT y e0 :0.23))(^(fight-vb e0 x y z)(TS#POVERTY y))))
;FIX THIS - args for STRUGGLE (fight against poverty Meta 6)
(B (name struggle-with) (=> (^(S#STRUGGLE u :0.45)(R#STRUGGLE-TARGET y x :0.45))(^(SS#STRUGGLE%TYPE x y)(with-in x y))))
(B (name struggle-against) (=> (^(R#STRUGGLE-TARGET y x :0.9))(^(SS#STRUGGLE%TYPE x e0)(against-in e1 x y))))
(B (name war-on) (=> (^(S#STRUGGLE y x :0.3) (SS#STRUGGLE%TYPE x e0 :0.3) (R#STRUGGLE-TARGET y x :0.3))(^(war-nn e0 x)(on-in e1 x y))))

(B (name weapon) (=>(^(S#STRUGGLE e0 :0.3)(SS#STRUGGLE%WEAPON y e0 :0.3))(weapon-nn e0 y)))
(B (name weapon-against) (=> (^(R#WEAPON-TARGET y x :0.9))(^(SS#STRUGGLE%WEAPON x e0)(against-in e1 x y))))

(B (name strugglemap)(=>(I#STRUGGLE x :0.9)(S#STRUGGLE x)))
(B (name struggle-typemap)(=>(I#STRUGGLE%TYPE x e0 :0.9)(SS#STRUGGLE%TYPE x e0)))
(B (name adversarymap)(=>(I#STRUGGLE%ADVERSARY x u :0.9)(SS#STRUGGLE%ADVERSARY x u)))
(B (name weaponmap)(=>(I#STRUGGLE%WEAPON x e0 :0.9)(SS#STRUGGLE%WEAPON x e0)))


; DISEASE
(B (name disease) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TYPE x e0 :0.45)) (disease-nn e0 x)))
(B (name cancer) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TYPE x e0 :0.45)) (cancer-nn e0 x)))
(B (name condition) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TYPE x e0 :0.45)) (condition-nn e0 x)))
(B (name sick) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE%TYPE e0 e0 :0.3)(R#SICK y e0 :0.3)) (sick-adj e0 y)))
(B (name sick) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TYPE x e0 :0.45)) (sick-nn e0 x)))
(B (name disease-of) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE%TYPE x e0 :0.3)(R#SICK y e0 :0.3)) (^(disease-nn e0 x)(of-in e1 x y))))

; TREATMENT
(B (name treatment) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TREATMENT x e0 :0.45))(treatment-nn e0 x)))
(B (name vaccination) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TREATMENT x e0 :0.45))(vaccination-nn e0 x)))
(B (name medicine)(=>(^(S#DISEASE e0 :0.3)(SS#DISEASE%TREATMENT x e0 :0.3)(R#CURE-AGENT x e0 :0.3)) (medicine-nn e0 x)))
(B (name treat) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE%TREATMENT e0 e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (treat-vb e0 y x u2)))
(B (name of-treatment) (=>(S#DISEASE y e0 :0.9)(^(SS#DISEASE%TREATMENT x y)(of-in e1 x y))))

; CURE
(B (name cure) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%CURE x e0 :0.45))(cure-nn e0 x)))
(B (name curevb) (=>(^(S#DISEASE e0 :0.23)(SS#DISEASE%CURE e0 e0 :0.23)(R#CURE-AGENT x e0 :0.23)(R#CURE-PATIENT y e0 :0.23 )) (cure-vb e0 x y z)))

; OF - CURE
(B (name for-cure) (=>(S#DISEASE y :0.9)(^(SS#DISEASE%CURE x y)(for-in e1 x y))))

; SYMPTOM
(B (name symptom) (=>(^(S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (symptom-nn e0 y)))

; OF - SYMPTOM
;(B (name of-symptom) (=>(S#DISEASE y :0.9)(^(SS#DISEASE%SYMPTOMS x y)(of-in e1 x y))))

(B (name dismap)(=>(I#DISEASE x :0.9)(S#DISEASE x)))
(B (name dis-typemap)(=>(I#DISEASE%TYPE x y :0.9)(SS#DISEASE%TYPE x y)))
(B (name curemap)(=>(I#DISEASE%CURE x y :0.9)(SS#DISEASE%CURE x y)))
(B (name treatmentmap)(=>(I#DISEASE%TREATMENT x y :0.9)(SS#DISEASE%TREATMENT x y)))
(B (name symptomsmap)(=>(I#DISEASE%SYMPTOMS x y :0.9)(SS#DISEASE%SYMPTOMS x y)))

; CRIME
;TYPE
(B (name crime)(=>(^(S#CRIME e0 :0.45)(SS#CRIME%TYPE x e0 :0.45)) (crime-nn e0 x)))
;CRIMINAL
(B (name criminal)(=>(^(S#CRIME e0 :0.3)(SS#CRIME%PERPETRATOR x e0 :0.3)(R#AGENT x e0 :0.3)) (criminal-nn e0 x)))
(B (name criminal2)(=>(^(S#CRIME e0 :0.3)(SS#CRIME%PERPETRATOR x e0 :0.3)(R#AGENT x e0 :0.3)) (criminal-adj e0 x)))

(B (name crimemap)(=>(I#CRIME x :0.9)(S#CRIME x)))
(B (name crime-typemap)(=>(I#CRIME%TYPE x y :0.9)(SS#CRIME%TYPE x y)))
(B (name crime-perpetratorsmap)(=>(I#CRIME%PERPETRATOR x y :0.9)(SS#CRIME%PERPETRATOR x y)))
(B (name punishmentmap)(=>(I#CRIME%PUNISHMENT x y :0.9)(SS#CRIME%PUNISHMENT x y)))
(B (name crime-perpetratorsmap)(=>(I#CRIME%VICTIM x y :0.9)(SS#CRIME%VICTIM x y)))


; ABYSS
(B (name abyss) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS%TYPE x e0 :0.45)) (abyss-nn e0 x)))


; DEPTH
(B (name depth) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS%DEPTH x e0 :0.45)) (depth-nn e0 x)))
(B (name deep) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS%DEPTH x e0 :0.45)) (deep-nn e0 x)))
(B (name deep2) (=>(^(S#ABYSS x :0.3)(SS#ABYSS%DEPTH e0 x :0.3)(R#ABYSS-THEME x u :0.3)) (deep-adj e0 x)))
;(B (name deeper) (=>(^(S#ABYSS x :0.3)(SS#ABYSS%DEPTH e0 x :0.3)(R#ABYSS-THEME x e0 :0.3)) (deeper-adj e0 x)))
;(B (name deepest) (=>(^(S#ABYSS x :0.3)(SS#ABYSS%DEPTH e0 x :0.3)(R#ABYSS-THEME x e0 :0.3)) (deepest-adj e0 x)))
(B (name deep3) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS%DEPTH e0 e0 :0.45)) (deeply-rb e0 x)))
(B (name ever-deepening) (=>(^(S#ABYSS x :0.3)(SS#ABYSS%DEPTH e0 x :0.3)(R#ABYSS-THEME x e0 :0.3)) (ever-deepening-adj e0 x)))

(B (name depth-of) (=> (R#ABYSS-THEME y e0 :0.90)(^(SS#ABYSS_DEPTH x)(of-in e1 x y))))

; EXIT

(B (name pull-out-of) (=>(^(S#ABYSS e0 :0.2)(SS#ABYSS%EXIT e0 e0 :0.2)(R#ABYSS-THEME z e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(pull-vb e0 x y u)(out-in e1 e0)(of-in e2 e0 z))))
(B (name lift-out-of) (=>(^(S#ABYSS e0 :0.2)(SS#ABYSS%EXIT e0 e0 :0.2)(R#ABYSS-THEME z e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(lift-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))

(B (name abyssmap)(=>(I#ABYSS x :0.9)(S#ABYSS x)))
(B (name abysstypemap)(=>(I#ABYSS%TYPE x e0 :0.9)(SS#ABYSS%TYPE x e0)))
(B (name abyssentrancemap)(=>(I#ABYSS%ENTRANCE x y :0.9)(SS#ABYSS%ENTRANCE x y)))
(B (name abyssexitmap)(=>(I#ABYSS%EXIT x y :0.9)(SS#ABYSS%EXIT x y)))
(B (name abyssdepthmap)(=>(I#ABYSS%DEPTH x y :0.9)(SS#ABYSS%DEPTH x y)))

; CROP
; PLANTING
(B (name crop)(=>(^(S#CROP e0 :0.4)(SS#CROP%TYPE x e0 :0.4)) (crop-nn e0 x)))
(B (name seed)(=>(^(S#CROP e0 :0.4)(SS#CROP%SEED x e0 :0.4)) (seed-nn e0 x)))

(B (name crop-of)(=>(^(S#CROP e0 :0.3)(SS#CROP%TYPE x e0 :0.3)(R#CROP-OUTCOME y e0 :0.3)) (^(crop-nn e0 x)(of-in e1 x y))))

; CULTIVATION
(B (name grow)(=>(^(S#CROP e0 :0.3)(SS#CROP%CULTIVATION e0 e0 :0.3)(R#GROWER x e0 :0.3)) (^(TS#POVERTY x)(grow-vb e0 x y z))))
(B (name grow)(=>(^(S#CROP e0 :0.23)(SS#CROP%CULTIVATION e0 e0 :0.23)(R#GROW-AGENT x e0 :0.23)(R#GROW-PATIENT y e0 :0.23))(^(TS#POVERTY y)(grow-vb e0 x y z))))
(B (name harvest)(=>(^(S#CROP e0 :0.15)(SS#CROP%CULTIVATION e0 x :0.15)(R#GROW-AGENT x e0 :0.15)(R#GROW-PATIENT y e0 :0.15)) (^(TS#POVERTY y)(harvest-vb e0 x y z))))
(B (name harvest)(=>(^(S#CROP e0 :0.23)(SS#CROP%CULTIVATION e0 x :0.23)(R#GROW-AGENT x e0 :0.23)(R#GROW-PATIENT y e0 :0.23))(harvest-vb e0 x y z)))

(B (name cropmap)(=>(I#CROP x :0.9)(S#CROP x)))
(B (name crop-typemap)(=>(I#CROP%TYPE x y :0.9)(SS#CROP%TYPE x y)))
(B (name crop-typemap)(=>(I#CROP%SEED x y :0.9)(SS#CROP%SEED x y)))
(B (name crop-plantingmap)(=>(I#CROP%PLANTING x y :0.9)(SS#CROP%PLANTING x y)))
(B (name crop-cultivationmap)(=>(I#CROP%CULTIVATION x y :0.9)(SS#CROP%CULTIVATION x y)))
(B (name crop-removalmap)(=>(I#CROP%REMOVAL x y :0.9)(SS#CROP%REMOVAL x y)))
(B (name crop-outcomemap)(=>(I#CROP%OUTCOME x y :0.9)(SS#CROP%OUTCOME x y)))


; PRICE
(B (name price) (=>(^(S#PRICE e0 :0.45)(SS#PRICE%TYPE x e0 :0.45))(price-nn e0 x)))

(B (name price-of) (=>(^(S#PRICE e0 :0.28)(SS#PRICE%TYPE x e0 :0.28) (R#PRICE-REWARD y e0 :0.28))(^(price-nn e0 x)(of-in e1 x y))))

;PAYMENT
(B (name pay) (=>(^(S#PRICE e0 :0.13)(SS#PRICE%PAYMENT e0 e0 :0.13)(R#PAYMENT-AGENT x e0 :0.13) (R#PAYMENT-PATIENT y e0 :0.13))(pay-vb e0 x y z)))
(B (name pay-for) (=>(^(S#PRICE e0 :0.13)(SS#PRICE%PAYMENT e0 e0 :0.13)(R#PRICE-REWARD a e1 :0.13) (R#PAYMENT-PATIENT y e0 :0.13))(^(pay-vb e0 x y z)(for-in e1 e0 a))))

(B (name pricemap)(=>(I#PRICE x :0.9)(S#PRICE x)))
(B (name price-typemap)(=>(I#PRICE%TYPE x e0 :0.9)(SS#PRICE%TYPE x e0)))
(B (name price-typemap)(=>(I#PRICE%PAYMENT x e0 :0.9)(SS#PRICE%PAYMENT x e0)))

; COST
(B (name cost) (=>(^(S#COST e0 :0.45)(SS#COST%TYPE x e0 :0.45))(cost-nn e0 x)))
(B (name cost-of) (=>(^(S#COST e0 :0.1)(SS#COST%TYPE x e0 :0.1)(R#COST-CAUSE y e0 :0.1))(^(cost-nn e0 x)(of-in e1 x y))))
(B (name cost-vb) (=>(^(S#COST e0 :0.13)(SS#COST%TYPE e0 e0 :0.13)(R#COST-CAUSE x e0 :0.13) (R#COST-PATIENT y e0 :0.13))(cost-vb e0 x y z)))

(B (name costmap)(=>(I#COST x :0.9)(S#COST x)))
(B (name cost-typemap)(=>(I#COST%TYPE x e0 :0.9)(SS#COST%TYPE x e0)))


; RESOURCE
(B (name resource) (=>(^(S#RESOURCE e0 :0.45)(SS#RESOURCE%TYPE x e0 :0.45))(resource-nn e0 x)))
(B (name resourcemap)(=>(I#RESOURCE x :0.9)(S#RESOURCE x)))
(B (name resource-typemap)(=>(I#RESOURCE%TYPE x e0 :0.9)(SS#RESOURCE%TYPE x e0)))

; POWER
(B (name power) (=>(^(S#POWER e0 :0.45)(SS#POWER%TYPE x e0 :0.45))(power-nn e0 x)))
(B (name rule-nn) (=>(^(S#POWER e0 :0.45)(SS#POWER%COMMAND x e0 :0.45))(rule-nn e0 x)))
(B (name rule) (=>(^(S#POWER e0 :0.2)(SS#POWER%COMMAND e0 e0 :0.2)(R#COMMAND-AGENT x e0 :0.2)(R#COMMAND-PATIENT y e0 :0.2))(rule-nn e0 x y z)))
(B (name powermap)(=>(I#POWER x :0.9)(S#POWER x)))
(B (name power-typemap)(=>(I#POWER%TYPE x e0 :0.9)(SS#POWER%TYPE x e0)))
(B (name power-typemap)(=>(I#POWER%COMMAND x e0 :0.9)(SS#POWER%COMMAND x e0)))

;VICTORY

(B (name victory) (=>(^(S#VICTORY e0 :0.45)(SS#VICTORY%TYPE x e0 :0.45))(victory-nn e0 x)))
(B (name victorymap)(=>(I#VICTORY x :0.9)(S#VICTORY x)))
(B (name victory-typemap)(=>(I#VICTORY%TYPE x e0 :0.9)(SS#VICTORY%TYPE x e0)))

;SECURITY

(B (name protection) (=>(^(S#SECURITY e0 :0.45)(SS#SECURITY%TYPE x e0 :0.45))(protection-nn e0 x)))
(B (name security) (=>(^(S#SECURITY e0 :0.45)(SS#SECURITY%TYPE x e0 :0.45))(security-nn e0 x)))
(B (name protect)(=>(^(S#SECURITY e0 :0.23)(SS#SECURITY%TYPE e0 e0 :0.23)(R#PROTECT-AGENT x e0 :0.23)(R#PROTECT-PATIENT y e0 :0.23)) (protect-vb e0 x y z)))
(B (name securitymap)(=>(I#SECURITY x :0.9)(S#SECURITY x)))
(B (name security-typemap)(=>(I#SECURITY%TYPE x e0 :0.9)(SS#SECURITY%TYPE x e0)))

;WATER
(B (name river) (=> (^(S#WATER e0 :0.45)(SS#WATER%TYPE x e0 :0.45)) (river-nn e0 x)))

(B (name ocean) (=> (^(S#WATER e0 :0.45)(SS#WATER%TYPE x e0 :0.45)) (ocean-nn e0 x)))
(B (water-of) (=>(R#WATER-COMPARISON y e0 :0.9)(^(I#WATER%TYPE x e0)(of-in e1 x y))))

; MOVEMENT
(B (name flow) (=>(^(S#WATER e0 :0.3)(SS#WATER%MOVEMENT e0 e0 :0.3)(R#STREAMING x e0 :0.3))(flow-vb e0 x y z)))

(B (name flow) (=> (^(S#WATER e0 :0.45)(SS#WATER%MOVEMENT x e0 :0.45)) (flow-nn e0 x)))
(B (flow-of) (=>(R#STREAMING y e0 :0.9)(^(I#WATER%MOVEMENT x e0)(of-in e1 x y))))

(B (name watermap)(=>(I#WATER x :0.9)(S#WATER x)))
(B (name water-typemap)(=>(I#WATER%TYPE x e0 :0.9)(SS#WATER%TYPE x e0)))
(B (name water-movementmap)(=>(I#WATER%MOVEMENT x e0 :0.9)(SS#WATER%MOVEMENT x e0)))

;CONSUMPTION
(B (name taste)(=>(^(S#FOOD e0 :0.45)(SS#FOOD%TASTE x e0 :0.45)) (taste-nn e0 x)))
(B (name taste-of)(=>(^(S#FOOD e0 :0.3)(SS#FOOD%TASTE x e0 :0.3)(R#TASTE-OBJECT y e0 :0.3)) (^(taste-nn e0 x)(of-in e1 x y))))
(B (name taste-vb)(=>(^(S#FOOD e0 :0.23)(SS#FOOD%TASTE e0 e0 :0.23)(R#TASTE-AGENT x e0 :0.23)(R#TASTE-OBJECT y e0 :0.23)) (taste-vb e0 x y u)))

(B (name eat)(=>(^(S#FOOD e0 :0.23)(SS#FOOD%CONSUMPTION e0 e0 :0.23)(R#EAT-AGENT x e0 :0.23)(R#EAT-OBJECT y e0 :0.23)) (eat-vb e0 x y u)))

(B (name foodmap)(=>(I#FOOD x :0.9)(S#FOOD x)))
(B (name food-typemap)(=>(I#FOOD%TASTE x e0 :0.9)(SS#FOOD%TASTE x e0)))
(B (name food-typemap)(=>(I#FOOD%CONSUMPTION x e0 :0.9)(SS#FOOD%CONSUMPTION x e0)))

; BLOOD
; COMPONENT
(B (name blood)(=>(^(S#BLOOD e0 :0.45)(SS#BLOOD%COMPONENT x e0 :0.45)) (blood-nn e0 x)))
(B (name blood-of)(=>(^(S#BLOOD e0 :0.3)(SS#BLOOD%COMPONENT x e0 :0.3)(R#BLOOD-RECEIVER y e0 :0.3)) (^(blood-nn e0 x)(of-in e1 x y))))


(B (name bloodmap)(=>(I#BLOOD x :0.9)(S#BLOOD x)))
(B (name blood-typemap)(=>(I#BLOOD%COMPONENT x e0 :0.9)(SS#BLOOD%COMPONENT x e0)))

;GAME
(B (name game)(=>(^(S#GAME e0 :0.45)(SS#GAME%TYPE x e0 :0.45)) (game-nn e0 x)))
(B (name game-of)(=>(^(S#GAME e0 :0.3)(SS#GAME%TYPE x e0 :0.3)(R#GAME-THING y e0 :0.3)) (^(game-nn e0 x)(of-in e1 x y))))

(B (name play)(=>(^(S#GAME e0 :0.45)(SS#GAME%ACTIONS x e0 :0.45)) (play-nn e0 x)))
(B (name playvb)(=>(^(S#GAME e0 :0.3)(SS#GAME%ACTIONS e0 e0 :0.3)(R#PLAYER x e0 :0.3)) (play-vb e0 x y u)))

(B (name win)(=>(^(S#GAME e0 :0.3)(SS#GAME%OUTCOMES e0 e0 :0.3)(R#PLAYER x e0 :0.3)) (win-vb e0 x y u)))

(B (name gamemap)(=>(I#GAME x :0.9)(S#GAME x)))
(B (name game-typemap)(=>(I#GAME%TYPE x e0 :0.9)(SS#GAME%TYPE x e0)))
(B (name game-typemap)(=>(I#GAME%ACTIONS x e0 :0.9)(SS#GAME%ACTIONS x e0)))
(B (name game-typemap)(=>(I#GAME%OUTCOMES x e0 :0.9)(SS#GAME%OUTCOMES x e0)))

; DRUG
; TYPE
(B (name drug)(=>(^(S#DRUG e0 :0.45)(SS#DRUG%TYPE x e0 :0.45)) (drug-nn e0 x)))

(B (name addiction)(=>(^(S#DRUG e0 :0.45)(SS#DRUG%ADDICTION x e0 :0.45)) (addiction-nn e0 x)))
(B (addiction-to) (=>(R#ADDICTIVE-SUBSTANCE y e0 :0.9)(^(I#DRUGY%ADDICTION x e0)(to-in e1 x y))))
(B (name drug-addict)(=>(^(S#DRUG e0 :0.3)(SS#DRUG%ADDICTION x e0 :0.3)(R#ADDICTED y :0.3)) (^(drug-nn e0 x)(of-in e1 y x)(addict-nn e2 y))))

(B (name drunk)(=>(^(S#DRUG e0 :0.3)(SS#DRUG%EFFECT e0 e0 :0.3)(R#UNDER-INFLUENCE x :0.3)) (drunk-adj e0 x)))
(B (name drunk)(=>(^(S#DRUG e0 :0.45)(SS#DRUG%EFFECT x e0 :0.45)) (drunk-nn e0 x)))

(B (name rehab)(=>(^(S#DRUG e0 :0.45)(SS#DRUG%RECOVERY x e0 :0.45)) (rehab-nn e0 x)))

(B (name drugmap)(=>(I#DRUG x :0.9)(S#DRUG x)))
(B (name drug-typemap)(=>(I#DRUG%TYPE x e0 :0.9)(SS#DRUG%TYPE x e0)))
(B (name drug-addictionmap)(=>(I#DRUG%ADDICTION x e0 :0.9)(SS#DRUG%ADDICTION x e0)))
(B (name drug-effectmap)(=>(I#DRUG%EFFECT x e0 :0.9)(SS#DRUG%EFFECT x e0)))
(B (name drug-recoverymap)(=>(I#DRUG%RECOVERY x e0 :0.9)(SS#DRUG%RECOVERY x e0)))

; BODY
(B (name body)(=>(^(S#BODY e0 :0.45)(SS#BODY%TYPE x e0 :0.45)) (body-nn e0 x)))
(B (body-of) (=>(R#BODY-COMPARISON y e0 :0.45)(^(I#BODY%TYPE x e0)(of-in e1 x y))))

;(B (name hand)(=>(^(S#BODY e0 :0.3)(SS#BODY%PART x e0 :0.3)(R#HAND x :0.3)) (hand-nn e0 x)))
(B (name hand-of)(=>(^(S#BODY e0 :0.23)(SS#BODY%PART x e0 :0.23)(R#HAND x e0 :0.23)(R#CONTROLLER y e0 :0.23)) (^(hand-nn e0 x)(of-in e1 x y))))
(B (name head)(=>(^(S#BODY e0 :0.3)(SS#BODY%PART x e0 :0.3)(R#HEAD x e0 :0.3)) (head-nn e0 x)))

(B (name bodymap)(=>(I#BODY x :0.9)(S#BODY x)))
(B (name body-typemap)(=>(I#BODY%TYPE x e0 :0.9)(SS#BODY%TYPE x e0)))
(B (name body-partmap)(=>(I#BODY%PART x e0 :0.9)(SS#BODY%PART x e0)))
; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
; TARGET WORDS;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; POVERTY

(B (name poverty) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45))(poverty-nn e0 x)))
(B (name poorness) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (poorness-nn e0 x)))
(B (name indigence) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (indigence-nn e0 x)))
(B (name penury) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (penury-nn e0 x)))
(B (name beggary) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (beggary-nn e0 x)))
(B (name misery) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (misery-nn e0 x)))
(B (name bareness) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (bareness-nn e0 x)))
(B (name need) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (need-nn e0 x)))
(B (name necessity) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (necessity-nn e0 x)))
(B (name squalor) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (squalor-nn e0 x)))
(B (name bankruptcy) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (bankruptcy-nn e0 x)))

; POVERTY/WEALTH
(B (name inequality) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY x :0.45))(inequality-nn e0 x)))
(B (name inequity) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY x :0.45))(inequity-nn e0 x)))



; POOR
(B (name poor) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (poor-adj e0 y)))
(B (name poorer) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (poorer-adj e0 y)))
(B (name poorest) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (poorest-adj e0 y)))
(B (name broke) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (broke-adj e0 y)))
(B (name bankrupt) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (bankrupt-adj e0 y)))
(B (name destitute) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (destitute-adj e0 y)))
(B (name impoverished) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (impoverished-adj e0 y)))
(B (name lean) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (lean-adj e0 y)))
(B (name needy) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (needy-adj e0 y)))
(B (name shabby) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (shabby-adj e0 y)))
(B (name indigent) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (indigent-adj e0 y)))
(B (name homeless) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (homeless-adj e0 y)))

; POOR PERSON
(B (name poor2) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR x e0 :0.3)) (poor-nn e0 x)))
(B (name pauper) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (pauper-nn e0 y)))
(B (name peasant) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (peasant-nn e0 y)))
(B (name mendicant) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (mendicant-nn e0 y)))
(B (name beggar) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (beggar-nn e0 y)))
(B (name hobo) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (hobo-nn e0 y)))
(B (name homelessnn) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (homeless-nn e0 y)))

; BECOME POOR

(B (name become-poor) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR x e0 :0.3)) (^(become-vb e1 x e0 u)(poor-adj e0 y))))
(B (name grow-poor) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR x e0 :0.3)) (^(grow-vb e1 x e0 u)(poor-adj e0 y))))

; OF - POOR
(B (name of-poor) (=>(R#POOR y x :0.9)(^(TS#POVERTY x)(of-in e1 x y))))

; POOR AREA
(B (name slum) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (slum-nn e0 y)))
(B (name ghetto) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (ghetto-nn e0 y)))
(B (name shantytown) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (shantytown-nn e0 y)))
(B (name skid-row) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (^(row-nn e0 y)(skid-adj e1 y))))


; WEALTH
(B (name wealth) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (wealth-nn e0 x)))
(B (name wealth) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (capital-nn e0 x)))
(B (name wealthynn) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (wealthy-nn e0 x)))
(B (name richness) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (richness-nn e0 x)))
(B (name rich) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (rich-nn e0 x)))
(B (name resplendence) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (resplendence-nn e0 x)))
(B (name gorgeousness) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (gorgeousness-nn e0 x)))
(B (name luxury) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (luxury-nn e0 x)))
(B (name treasure) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (treasure-nn e0 x)))
(B (name fortune) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (fortune-nn e0 x)))
(B (name profusion) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (profusion-nn e0 x)))
(B (name means) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (means-nn e0 x)))
(B (name affluence) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (affluence-nn e0 x)))
(B (name property) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (property-nn e0 x)))
(B (name property) (=>(^(TS#WEALTH x :0.1)(T#ECONOMIC-INEQUALITY u :0.1)) (^(wall-nn e0 x)(street-nn e1 x))))
(B (name middle-class) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (^(middle-adj e0 x)(class-nn e1 x))))
(B (name upper-class) (=>(^(TS#WEALTH x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (^(upper-adj e0 x)(class-nn e1 x))))

; RICH PERSON
(B (name rich) (=>(^(TS#WEALTH e0 :0.3)(R#RICH y e0 :0.3) (T#ECONOMIC-INEQUALITY u :0.3)) (rich-adj e0 y)))
(B (name richer) (=>(^(TS#WEALTH e0 :0.3)(R#RICH y e0 :0.3) (T#ECONOMIC-INEQUALITY u :0.3)) (richer-adj e0 y)))
(B (name richest) (=>(^(TS#WEALTH e0 :0.3)(R#RICH y e0 :0.3) (T#ECONOMIC-INEQUALITY u :0.3)) (richest-adj e0 y)))
(B (name prosperous) (=>(^(TS#WEALTH e0 :0.3)(R#RICH y e0 :0.3) (T#ECONOMIC-INEQUALITY u :0.3)) (prosperous-adj e0 y)))
(B (name money-bags) (=>(^(TS#WEALTH e0 :0.3)(R#RICH y e0 :0.3) (T#ECONOMIC-INEQUALITY u :0.3)) (money-bags-nn e0 y)))
(B (name multi-millionaire) (=>(^(TS#WEALTH e0 :0.3)(R#RICH y e0 :0.3) (T#ECONOMIC-INEQUALITY u :0.3)) (multi-millionaire-nn e0 y)))
(B (name billionaire) (=>(^(TS#WEALTH e0 :0.3)(R#RICH y e0 :0.3) (T#ECONOMIC-INEQUALITY u :0.3)) (billionaire-nn e0 y)))
(B (name millionaire) (=>(^(TS#WEALTH e0 :0.3)(R#RICH y e0 :0.3) (T#ECONOMIC-INEQUALITY u :0.3)) (millionaire-nn e0 y)))

(B (name wealthy) (=>(^(TS#WEALTH e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#RICH x e0 :0.3)) (wealthy-adj e0 x)))

; BE RICH
(B (name prosper) (=>(^(TS#WEALTH e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#RICH x e0 :0.3)) (prosper-vb e0 x u1 u2)))
; (B (name thrive) (=>(^(TS#WEALTH e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#RICH x e0 :0.3)) (thrive-vb e0 x u1 u2)))

; OF - WEALTH
(B (name of-rich) (=>(R#RICH  y x :0.9)(^(TS#WEALTH x)(of-in e1 x y))))

; MONEY
(B (name money) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (money-nn e0 x)))
(B (name cash) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (cash-nn e0 x)))
(B (name coin) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (coin-nn e0 x)))
(B (name cent) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (cent-nn e0 x)))
(B (name penny) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (penny-nn e0 x)))
(B (name dime) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (dime-nn e0 x)))
(B (name nickel) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (nickel-nn e0 x)))
(B (name quarter) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (quarter-nn e0 x)))
(B (name currency) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (currency-nn e0 x)))
(B (name dollar) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (dollar-nn e0 x)))
(B (name greenback) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (greenback-nn e0 x)))
(B (name euro) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (euro-nn e0 x)))
(B (name peso) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (peso-nn e0 x)))
(B (name rupee) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (rupee-nn e0 x)))
(B (name yen) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (yen-nn e0 x)))
(B (name gold) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (gold-nn e0 x)))
(B (name silver) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (silver-nn e0 x)))
(B (name income) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (income-nn e0 x)))
(B (name salary) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (salary-nn e0 x)))
(B (name wage) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (wage-nn e0 x)))
(B (name wallet) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (wallet-nn e0 x)))
(B (name checkbook) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (checkbook-nn e0 x)))
(B (name credit-card) (=>(^(TS#WEALTH x :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(TSS#MONEY x x :0.3)) (^(credit-nn e0 x)(of-in e2 e1)(card-nn e2 y))))



; SOCIAL CLASS
(B (name social-class) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (^(social-adj e0 x)(class-nn e1 x))))
(B (name middle-class) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (^(middle-adj e0 x)(class-nn e1 x))))
(B (name economy-class) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (^(economy-adj e0 x)(class-nn e1 x))))
(B (name class) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (class-nn e0 x)))
(B (name class) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (elite-nn e0 x)))

(B (name social-class) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS e0 :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (social-adj e0 x)))
