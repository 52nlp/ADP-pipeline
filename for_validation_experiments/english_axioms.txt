; DISEASE 

(B (name disease)(=> (^(M#CAUSE-NOT-FUNCTION e0 :0.3)(M#THING-CAUSING-NOT-FUNCTION x e0 :0.3)(M#FUNCTION-AGENT y e0 :0.3)) (^ (I#DISEASE x)(I#DISEASE%TYPE x x)(R#SICK y x))))
(B (name disease2) (=> (^(M#CAUSE-NOT-FUNCTION e0 :0.45)(M#THING-CAUSING-NOT-FUNCTION x e0 :0.45)) (^(I#DISEASE y)(I#DISEASE%TYPE x y))))

;(B (name cure)(=> (^(M#CAUSE-NOT-EXIST e1 :0.3)(M#THING-CAUSING-NOT-EXIST y e1 :0.3)(M#EXISTING-THING x e1 :0.3)) (^(I#DISEASE%CURE e0 e0)(R#CURE-AGENT y e0)(R#SICK x d)(S#DISEASE d))))
(B (name cure)(=> (^(M#CAUSE-NOT-EXIST e0 :0.45)(M#THING-CAUSING-NOT-EXIST x e0 :0.45)) (^(I#DISEASE e0) (I#DISEASE%CURE e0 e0)(R#CURE-AGENT x e0))))
(B (name cure2)(=> (^(M#CAUSE-NOT-EXIST e0 :0.3)(M#THING-CAUSING-NOT-EXIST x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3)) (^(I#DISEASE e0) (I#DISEASE%CURE e0 e0)(R#CURE-AGENT x e0)(R#CURE-PATIENT y e0))))
;(B (name cure3)(=> (^(M#CAUSE-NOT-EXIST e1 :0.48)(M#THING-CAUSING-NOT-EXIST e0 e1 :0.48)) (I#CURE e0)))

; STRUGGLE 

(B (name fight)(=>(^(M#CAUSE-NOT-EXIST e0 :0.3)(M#THING-CAUSING-NON-EXISTENCE z e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3))(^(I#STRUGGLE e0)(R#STRUGGLE-PATIENT y x)(R#STRUGGLE-AGENT z x))))

(B (name fight2)(=> (^(M#CAUSE-NOT-EXIST x :0.32)(M#EXISTING-THING y x :0.32)(M#THING-CAUSING-NOT-EXIST x e1 :0.32)) (^(I#STRUGGLE x)(R#STRUGGLE-ENEMY y x))))
(B (name fight3)(=> (^(M#CAUSE-NOT-EXIST x :0.46)(M#THING-CAUSING-NOT-EXIST z x :0.46)) (^(I#STRUGGLE x)(R#STRUGGLE-AGENT z x)))) 
;(B (name fight4)(=> (M#CAUSE-NOT-EXIST e0 :0.9) (I#STRUGGLE e0)))
(B (name fight5)(=>(^(M#CAUSE-NOT-EXIST e0 :0.45)(M#THING-NOT-EXISTING y e0 :0.45))(^(I#STRUGGLE e0)(R#STRUGGLE-TARGET y x))))

(B (name weapon)(=> (^(M#ENABLE-STRUGGLE x e1 :0.45)(M#STRUGGLE%TYPE e1 :0.45)) (^(I#STRUGGLE e0)(I#STRUGGLE%WEAPON x e0))))
(B (name weapon2)(=> (^(M#ENABLE-STRUGGLE x e1 :0.3)(M#STRUGGLE%TYPE e1 :0.3)(M#THING-NOT-EXISTING y e0 :0.3)) (^(I#STRUGGLE e0)(I#STRUGGLE%WEAPON x e0)(R#WEAPON-TARGET y x))))

(B (name enemy)(=> (^(M#CAUSE-NOT-FUNCTION e1 :0.3)(M#THING-CAUSING-NOT-FUNCTION x e1 :0.3)(M#FUNCTION-AGENT z e1 :0.3)) (^ (I#STRUGGLE-ADVERSARY x e0)(R#STRUGGLE-AGENT z e0))))
(B (name enemy2)(=> (^(M#CAUSE-NOT-FUNCTION e1 :0.45)(M#THING-CAUSING-NOT-FUNCTION x e1 :0.45)) (I#STRUGGLE-ADVERSARY x e0)))


; CRIME 

(B (name crime)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.3)(M#AGAINST-SOCIETY-ACTOR x e0 :0.3)(M#AGAINST-SOCIETY-ACTION-VICTIM y e0 :0.3)) (^(I#CRIME x)(R#CRIME-AGENT x e0)(R#CRIME-VICTIM y e0))))
(B (name crime2)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTOR x e0 :0.45)) (^(I#CRIME e0)(R#CRIME-AGENT x e0))))
(B (name crime3)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTION-VICTIM y e0 :0.45)) (^(I#CRIME e0)(R#CRIME-VICTIM y e0))))
(B (name crime4)(=> (M#AGAINST-SOCIETY-ACTION e0 :0.91) (^(I#CRIME e0)(I#CRIME%TYPE x e0))))
(B (name crime-perpetrator)(=> (^(M#AGAINST-SOCIETY-ACTION e0 :0.45)(M#AGAINST-SOCIETY-ACTOR x e0 :0.45)) (^(I#CRIME e0)(I#PERPETRATORS x e0)(R#CRIME-AGENT x e0))))

; ABYSS
(B (name abyss) (=>(^(M#CAUSE-NOT-FUNCTION e0 :0.3)(M#THING-CAUSING-NOT-FUNCTION e0 x :0.3)(M#CAUSE-CONFINEMENT e0 :0.3)) (I#ABYSS e0)))

; ABYSS-EXIT
(B (name abyss-exit) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-EXIT-CONFINEMENT e0 :0.45)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0))))

;(B (name abyss-exit2) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-EXIT-CONFINEMENT e0 :0.45)(M#CAUSING-THING-RF x e0 :0.45)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0) (R#ABYSS-EXIT-CAUSE x e0))))
(B (name abyss-exit3) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.23) (M#CAUSE-EXIT-CONFINEMENT e0 :0.23)(M#THING-THAT-CONFINED z :0.23)(M#THING-THAT-STOPPED-FUNCTION z :0.23)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0) (R#ABYSS-THEME z e))))
;(B (name abyss-exit4) (=> (^(M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-EXIT-CONFINEMENT e0 :0.45)(M#CAUSING-THING-RF x e0 :0.45)) (^(I#ABYSS e0)(I#ABYSS%EXIT e0 e0) (R#ABYSS-EXIT-CAUSE x e0)(R#ABYSS-THEME z e))))

; ABYSS-DEEP
(B (name deep) (=> (^(M#INTENSIFY-CAUSE-NOT-FUNCTION e0 :0.45) (M#INTENSIFY-CAUSE-CONFINEMENT e0 :0.45)) (I#ABYSS%DEPTH e0 x)))

; CROP
(B (name crop) (=>(M#OUTCOME-OF-ACTION e0 :0.9) (^(I#CROP e0)(I#CROP%TYPE x e0))))

(B (name grow_crop) (=>(^(M#CAUSE-INCREASE-AMOUNT e0 :0.45)(M#THING-INCREASING x e0 :0.45)) (^(I#CROP e0)(I#CROP%CULTIVATION e0 e0)(R#GROWER x e0))))

(B (name remove_crop) (=>(^(M#CAUSE-NOT-EXIST e0 :0.3)(M#THING-CAUSING-NON-EXISTENCE x e0 :0.3)(M#THING-NOT-EXISTING y e0 :0.3)) (^(I#CROP e0)(I#CROP%REMOVAL e0 e0)(R#REMOVER x e0)(R#REMOVE-PATIENT y e0))))

;PRICE 
(B (name price) (=>(M#UNFORTUNATE-CONSEQUENCE e0 :0.9) (^(I#PRICE e0)(I#PRICE%TYPE x e0))))
(B (name price2) (=>(^(M#UNFORTUNATE-CONSEQUENCE-OF-DESIRED-THING e0 :0.45)(M#THING-DESIRED y e0 :0.45)) (^(I#PRICE e0)(I#PRICE%TYPE x e0)(R#PRICE-REWARD y e0))))

;VIOLENCE
(B (name violence) (=> (^(M#CAUSE-NOT-FUNCTION x e0 :0.23)(M#CAUSE-FEAR x e0 :0.23)(M#THING-CAUSING-NOT-FUNCTION x e0 :0.23) (M#THING-CAUSING-FEAR x e0 :0.23)) (^(I#VIOLENCE y)(I#VIOLENCE%TYPE x y))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;LMS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; VIOLENCE
(B (name violence) (=>(^(S#VIOLENCE e0 :0.45)(SS#VIOLENCE%TYPE x e0 :0.45))(violence-nn e0 x)))
(B (name violent) (=>(^(S#VIOLENCE e0 :0.45)(SS#VIOLENCE%TYPE x e0 :0.45))(violent-adj e0 x)))

(B (name violencemap)(=>(I#VIOLENCE x :0.9)(S#VIOLENCE x)))
(B (name violence-typemap)(=>(I#VIOLENCE%TYPE x e0 :0.9)(SS#VIOLENCE%TYPE x e0)))

; PRICE
(B (name price) (=>(^(S#PRICE e0 :0.45)(SS#PRICE%TYPE x e0 :0.45))(price-nn e0 x)))

(B (name price-of) (=>(^(S#PRICE e0 :0.28)(SS#PRICE%TYPE x e0 :0.28) (R#PRICE-REWARD y e0 :0.28))(^(price-nn e0 x)(of-in e1 x y))))

;PAYMENT
;(B (name pay) (=>(^(S#PRICE e0 :0.23)(SS#PRICE%PAYMENT e0 e0 :0.23)(R#PAYMENT-AGENT x e0 :0.23) (R#PAYMENT-PATIENT y e0 :0.23))(pay-vb e0 x y z)))

(B (name pricemap)(=>(I#PRICE x :0.9)(S#PRICE x)))
(B (name price-typemap)(=>(I#PRICE%TYPE x e0 :0.9)(SS#PRICE%TYPE x e0)))

; STRUGGLE
(B (name war) (=>(^(S#STRUGGLE e0 :0.45)(SS#STRUGGLE%TYPE x e0 :0.45))(war-nn e0 x)))
(B (name fight) (=>(^(S#STRUGGLE e0 :0.45)(SS#STRUGGLE%TYPE x e0 :0.45))(fight-nn e0 x)))
(B (name combat) (=>(^(S#STRUGGLE e0 :0.45)(SS#STRUGGLE%TYPE x e0 :0.45))(combat-nn e0 x)))

(B (name combat) (=>(^(S#STRUGGLE e0 :0.23) (SS#STRUGGLE%TYPE e0 e0 :0.23)(R#STRUGGLE-AGENT x e0 :0.23)(R#STRUGGLE-PATIENT y e0 :0.23))(combat-vb e0 x y z)))
(B (name fight) (=>(^(S#STRUGGLE e0 :0.23) (SS#STRUGGLE%TYPE e0 e0 :0.23)(R#STRUGGLE-AGENT x e0 :0.23)(R#STRUGGLE-PATIENT y e0 :0.23))(fight-vb e0 x y z)))
;FIX THIS - args for STRUGGLE (fight against poverty Meta 6)
(B (name fight-with) (=> (S#STRUGGLE y x :0.90)(^(SS#STRUGGLE%TYPE x y)(with-in x y))))
(B (name fight-against) (=> (^(S#STRUGGLE y x :0.45)(R#STRUGGLE-TARGET y x :0.45))(^(SS#STRUGGLE%TYPE x e0)(against-in e1 x y))))

(B (name weapon) (=>(^(S#STRUGGLE e0 :0.45)(SS#STRUGGLE%WEAPON y e0 :0.45))(weapon-nn e0 y)))
(B (name weapon-against) (=> (^(S#STRUGGLE y x :0.45)(R#WEAPON-TARGET y x :0.45))(^(SS#STRUGGLE%WEAPON x e0)(against-in e1 x y))))

(B (name strugglemap)(=>(I#STRUGGLE x :0.9)(S#STRUGGLE x)))
(B (name struggle-typemap)(=>(I#STRUGGLE%TYPE x e0 :0.9)(SS#STRUGGLE%TYPE x e0)))
(B (name adversarymap)(=>(I#STRUGGLE%ADVERSARY x u :0.9)(SS#STRUGGLE%ADVERSARY x u)))
(B (name weaponmap)(=>(I#STRUGGLE%WEAPON x e0 :0.9)(SS#STRUGGLE%WEAPON x e0)))


; DISEASE
(B (name disease) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TYPE x e0 :0.45)) (disease-nn e0 x)))
(B (name cancer) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TYPE x e0 :0.45)) (cancer-nn e0 x)))
(B (name condition) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%TYPE x e0 :0.45)) (condition-nn e0 x)))

; TREATMENT
(B (name treatment) (=>(^(S#DISEASE e0:0.45)(SS#DISEASE%TREATMENT x e0:0.45))(treatment-nn e0 x)))
(B (name medicine)(=>(^(S#DISEASE e0 :0.3)(SS#DISEASE%TREATMENT x e0 :0.3)(R#CURE-AGENT x e0 :0.3)) (medicine-nn e0 x)))
(B (name treat) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE%TREATMENT e0 e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (treat-vb e0 y x u2)))
(B (name of-treatment) (=>(S#DISEASE y e0 :0.9)(^(SS#DISEASE%TREATMENT x y)(of-in e1 x y))))

; CURE
(B (name cure) (=>(^(S#DISEASE e0 :0.45)(SS#DISEASE%CURE x e0 :0.45))(cure-nn e0 x)))
(B (name curevb) (=>(^(S#DISEASE e0 :0.23)(SS#DISEASE%CURE e0 e0 :0.23)(R#CURE-AGENT x e0 :0.23)(R#CURE-PATIENT y e0 :0.23 )) (cure-vb e0 x y z)))

; OF - CURE
(B (name for-cure) (=>(S#DISEASE y :0.9)(^(SS#DISEASE%CURE x y)(for-in e1 x y))))

; SYMPTOM
(B (name symptom) (=>(^(S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (symptom-nn e0 y)))

; OF - SYMPTOM
;(B (name of-symptom) (=>(S#DISEASE y :0.9)(^(SS#DISEASE%SYMPTOMS x y)(of-in e1 x y))))

(B (name dismap)(=>(I#DISEASE x :0.9)(S#DISEASE x)))
(B (name dis-typemap)(=>(I#DISEASE%TYPE x y :0.9)(SS#DISEASE%TYPE x y)))
(B (name curemap)(=>(I#DISEASE%CURE x y :0.9)(SS#DISEASE%CURE x y)))
(B (name treatmentmap)(=>(I#DISEASE%TREATMENT x y :0.9)(SS#DISEASE%TREATMENT x y)))
(B (name symptomsmap)(=>(I#DISEASE%SYMPTOMS x y :0.9)(SS#DISEASE%SYMPTOMS x y)))

; CRIME
;TYPE
(B (name crime)(=>(^(S#CRIME e0 :0.45)(SS#CRIME%TYPE x e0 :0.45)) (crime-nn e0 x)))
;CRIMINAL
(B (name criminal)(=>(^(S#CRIME e0 :0.3)(SS#CRIME%PERPETRATOR x e0 :0.3)(R#AGENT x e0 :0.3)) (criminal-nn e0 x)))
(B (name criminal2)(=>(^(S#CRIME e0 :0.3)(SS#CRIME%PERPETRATOR x e0 :0.3)(R#AGENT x e0 :0.3)) (criminal-adj e0 x)))

(B (name crimemap)(=>(I#CRIME x :0.9)(S#CRIME x)))
(B (name crime-typemap)(=>(I#CRIME%TYPE x y :0.9)(SS#CRIME%TYPE x y)))
(B (name crime-perpetratorsmap)(=>(I#CRIME%PERPETRATOR x y :0.9)(SS#CRIME%PERPETRATOR x y)))
(B (name punishmentmap)(=>(I#CRIME%PUNISHMENT x y :0.9)(SS#CRIME%PUNISHMENT x y)))
(B (name crime-perpetratorsmap)(=>(I#CRIME%VICTIM x y :0.9)(SS#CRIME%VICTIM x y)))


; ABYSS
(B (name abyss) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS%TYPE x e0 :0.45)) (abyss-nn e0 x)))


; DEPTH
(B (name depth) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS%DEPTH x e0 :0.45)) (depth-nn e0 x)))
(B (name deep) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS%DEPTH x e0 :0.45)) (deep-nn e0 x)))
(B (name deep2) (=>(^(S#ABYSS x :0.3)(SS#ABYSS%DEPTH e0 x :0.3)(R#ABYSS-THEME x e0 :0.3)) (deep-adj e0 x)))
(B (name deeper) (=>(^(S#ABYSS x :0.3)(SS#ABYSS%DEPTH e0 x :0.3)(R#ABYSS-THEME x e0 :0.3)) (deeper-adj e0 x)))
(B (name deepest) (=>(^(S#ABYSS x :0.3)(SS#ABYSS%DEPTH e0 x :0.3)(R#ABYSS-THEME x e0 :0.3)) (deepest-adj e0 x)))
(B (name deep3) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS%DEPTH e0 e0 :0.45)) (deeply-rb e0 x)))
(B (name ever-deepening) (=>(^(S#ABYSS x :0.3)(SS#ABYSS%DEPTH e0 x :0.3)(R#ABYSS-THEME x e0 :0.3)) (ever-deepening-adj e0 x)))

(B (name depth-of) (=> (R#ABYSS-THEME y e0 :0.90)(^(SS#ABYSS_DEPTH x)(of-in e1 x y))))

; EXIT

(B (name pull-out-of) (=>(^(S#ABYSS e0 :0.2)(SS#ABYSS%EXIT e0 e0 :0.2)(R#ABYSS-THEME z e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(pull-vb e0 x y u)(out-in e1 e0)(of-in e2 e0 z))))
(B (name lift-out-of) (=>(^(S#ABYSS e0 :0.2)(SS#ABYSS%EXIT e0 e0 :0.2)(R#ABYSS-THEME z e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(lift-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))

(B (name abyssmap)(=>(I#ABYSS x :0.9)(S#ABYSS x)))
(B (name abysstypemap)(=>(I#ABYSS%TYPE x e0 :0.9)(SS#ABYSS%TYPE x e0)))
(B (name abyssentrancemap)(=>(I#ABYSS%ENTRANCE x y :0.9)(SS#ABYSS%ENTRANCE x y)))
(B (name abyssexitmap)(=>(I#ABYSS%EXIT x y :0.9)(SS#ABYSS%EXIT x y)))
(B (name abyssdepthmap)(=>(I#ABYSS%DEPTH x y :0.9)(SS#ABYSS%DEPTH x y)))

; CROP
; PLANTING
(B (name crop)(=>(^(S#CROP e0 :0.3)(SS#CROP%TYPE x e0 :0.3)(R#CROP x e0 :0.3)) (crop-nn e0 x)))
(B (name seed)(=>(^(S#CROP e0 :0.3)(SS#CROP%TYPE x e0 :0.3)(R#SEED x e0 :0.3)) (seed-nn e0 x)))

; CULTIVATION
(B (name grow)(=>(^(S#CROP e0 :0.3)(SS#CROP%CULTIVATION e0 e0 :0.3)(R#GROWER x e0 :0.3)) (^(TS#POVERTY x)(grow-vb e0 x y u))))
(B (name grow)(=>(^(S#CROP e0 :0.23)(SS#CROP%CULTIVATION e0 e0 :0.23)(R#GROW-AGENT x e0 :0.23)(R#GROW-PATIENT y e0 :0.23))(^(TS#POVERTY y)(grow-vb e0 x y u))))
(B (name harvest)(=>(^(S#CROP e0 :0.3)(SS#CROP%CULTIVATION e0 e0 :0.3)(R#GROWER x e0 :0.3)) (^(TS#POVERTY x)(harvest-vb e0 x y u))))
(B (name harvest)(=>(^(S#CROP e0 :0.23)(SS#CROP%CULTIVATION e0 e0 :0.23)(R#GROW-AGENT x e0 :0.23)(R#GROW-PATIENT y e0 :0.23)) (^(TS#POVERTY y)(harvest-vb e0 x y u))))

(B (name cropmap)(=>(I#CROP x :0.9)(S#CROP x)))
(B (name crop-typemap)(=>(I#CROP%TYPE x y :0.9)(SS#CROP%TYPE x y)))
(B (name crop-plantingmap)(=>(I#CROP%PLANTING x y :0.9)(SS#CROP%PLANTING x y)))
(B (name crop-cultivationmap)(=>(I#CROP%CULTIVATION x y :0.9)(SS#CROP%CULTIVATION x y)))
(B (name crop-removalmap)(=>(I#CROP%REMOVAL x y :0.9)(SS#CROP%REMOVAL x y)))
(B (name crop-outcomemap)(=>(I#CROP%OUTCOME x y :0.9)(SS#CROP%OUTCOME x y)))



; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
; TARGET WORDS;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; POVERTY

(B (name poverty) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45))(poverty-nn e0 x)))
(B (name poorness) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (poorness-nn e0 x)))
(B (name indigence) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (indigence-nn e0 x)))
(B (name penury) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (penury-nn e0 x)))
(B (name beggary) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (beggary-nn e0 x)))
(B (name misery) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (misery-nn e0 x)))
(B (name bareness) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (bareness-nn e0 x)))
(B (name need) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (need-nn e0 x)))
(B (name necessity) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (necessity-nn e0 x)))
(B (name squalor) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (squalor-nn e0 x)))
(B (name bankruptcy) (=>(^(TS#POVERTY x :0.45)(T#ECONOMIC-INEQUALITY u :0.45)) (bankruptcy-nn e0 x)))

; POVERTY/WEALTH
(B (name inequality) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY x :0.45))(inequality-nn e0 x)))
(B (name inequity) (=>(^(TS#WEALTH_AND_SOCIAL_CLASS x :0.45)(T#ECONOMIC-INEQUALITY x :0.45))(inequity-nn e0 x)))



; POOR
(B (name poor) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (poor-adj e0 y)))
(B (name poorer) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (poorer-adj e0 y)))
(B (name poorest) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (poorest-adj e0 y)))
(B (name broke) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (broke-adj e0 y)))
(B (name bankrupt) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (bankrupt-adj e0 y)))
(B (name destitute) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (destitute-adj e0 y)))
(B (name impoverished) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (impoverished-adj e0 y)))
(B (name lean) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (lean-adj e0 y)))
(B (name needy) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (needy-adj e0 y)))
(B (name shabby) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (shabby-adj e0 y)))
(B (name indigent) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (indigent-adj e0 y)))
(B (name homeless) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (homeless-adj e0 y)))

; POOR PERSON
(B (name poor2) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR x e0 :0.3)) (poor-nn e0 x)))
(B (name pauper) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (pauper-nn e0 y)))
(B (name peasant) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (peasant-nn e0 y)))
(B (name mendicant) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (mendicant-nn e0 y)))
(B (name beggar) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (beggar-nn e0 y)))
(B (name hobo) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (hobo-nn e0 y)))
(B (name homelessnn) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (homeless-nn e0 y)))

; BECOME POOR

(B (name become-poor) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR x e0 :0.3)) (^(become-vb e1 x e0 u)(poor-adj e0 y))))
(B (name grow-poor) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR x e0 :0.3)) (^(grow-vb e1 x e0 u)(poor-adj e0 y))))

; OF - POOR
(B (name of-poor) (=>(R#POOR y x :0.9)(^(TS#POVERTY x)(of-in e1 x y))))

; POOR AREA
(B (name slum) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (slum-nn e0 y)))
(B (name ghetto) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (ghetto-nn e0 y)))
(B (name shantytown) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (shantytown-nn e0 y)))
(B (name skid-row) (=>(^(TS#POVERTY e0 :0.3)(T#ECONOMIC-INEQUALITY u :0.3)(R#POOR y e0 :0.3)) (^(row-nn e0 y)(skid-adj e1 y))))
