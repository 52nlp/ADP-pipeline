; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SOURCE WORDS;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; DISEASE
(B (name disease) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (disease-nn e0 x)))
(B (name illness) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (illness-nn e0 x)))
(B (name disorder) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (disorder-nn e0 x)))
(B (name sickness) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (sickness-nn e0 x)))
(B (name malum) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (malum-nn e0 x)))
(B (name morbus) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (morbus-nn e0 x)))
(B (name malady) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (malady-nn e0 x)))
(B (name malaise) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (malaise-nn e0 x)))
(B (name ailment) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (ailment-nn e0 x)))
(B (name affliction) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (affliction-nn e0 x)))
(B (name medical-condition) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (^(condition-nn e0 x)(medical-adj e1 x))))
(B (name health-problem) (=>(^(S#DISEASE y :0.45)(SS#DISEASE-TYPE y :0.45)) (^(health-nn e0 x)(problem-nn e1 y))))

(B (name plague) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (plague-nn e0 x)))
(B (name cancer) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (cancer-nn e0 x)))
(B (name infection) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (infection-nn e0 x)))
(B (name blight) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE x :0.45)) (blight-nn e0 x)))


; SICK
(B (name sick) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (sick-adj e0 y)))
(B (name ill) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (ill-adj e0 y)))
(B (name sore) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (sore-adj e0 y)))
(B (name diseased) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (diseased-adj e0 y)))
(B (name handicapped) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (handicapped-adj e0 y)))
(B (name disabled) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (disabled-adj e0 y)))

(B (name crippled) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (crippled-adj e0 y)))

(B (name invalid) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (invalid-nn e0 y)))
(B (name patient) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE x :0.3)(R#SICK y e0 :0.3)) (patient-nn e0 y)))

(B (name suffer-from) (=>(^(S#DISEASE e0 :0.3)(SS#DISEASE-TYPE e0 :0.3)(R#SICK y x :0.3))(^(suffer-vb e0 y u1 u2)(from-in e1 e0 x))))

; OF - DISEASE
(B (name of-disease) (=>(R#SICK  y x :0.9)(^(S#DISEASE x)(of-in e1 x y))))
 
; TREATMENT

(B (name treatment) (=>(^(S#DISEASE x :0.45)(SS#TREATMENT e0  :0.45))(treatment-nn e1 e0)))
(B (name operation) (=>(^(S#DISEASE x :0.45)(SS#TREATMENT e0  :0.45))(operation-nn e1 e0)))
(B (name therapy) (=>(^(S#DISEASE x :0.45)(SS#TREATMENT e0  :0.45))(therapy-nn e1 e0)))
(B (name diagnosis) (=>(^(S#DISEASE x :0.45)(SS#TREATMENT e0  :0.45))(diagnosis-nn e1 e0)))
(B (name diagnostic) (=>(^(S#DISEASE x :0.45)(SS#TREATMENT e1  :0.45))(diagnostic-adj e1 e0)))
; (B (name examination)(=>(^(S#DISEASE x :0.45)(SS#TREATMENT x :0.45)) (examination-nn e0 x)))
(B (name prescription)(=>(^(S#DISEASE x :0.45)(SS#TREATMENT x :0.45)) (prescription-nn e0 x)))

(B (name doctor) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(doctor-nn e0 y)))
(B (name healer) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(healer-nn e0 y)))
(B (name physician) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(physician-nn e0 y)))
(B (name suregon) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(surgeon-nn e0 y)))
(B (name medic) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(medic-nn e0 y)))
(B (name medicament) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(medicament-nn e0 y)))
(B (name remedy) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(remedy-nn e0 y)))
(B (name antibiotic)(=>(^(S#DISEASE x :0.3)(SS#TREATMENT x :0.3)(R#CURE-AGENT x e0 :0.3)) (antibiotic-nn e0 x)))
(B (name medicine)(=>(^(S#DISEASE x :0.3)(SS#TREATMENT x :0.3)(R#CURE-AGENT x e0 :0.3)) (medicine-nn e0 x)))
(B (name drug)(=>(^(S#DISEASE x :0.3)(SS#TREATMENT x :0.3) (R#CURE-AGENT x e0 :0.3)) (drug-nn e0 x)))
(B (name pill)(=>(^(S#DISEASE x :0.3)(SS#TREATMENT x :0.3)(R#CURE-AGENT x e0 :0.3)) (pill-nn e0 x)))
(B (name bandage) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(bandage-nn e0 y)))
(B (name band-aid) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3))(band-aid-nn e0 y)))

(B (name treat) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (treat-vb e0 y x u2)))
(B (name prescribe) (=>(^(S#DISEASE u :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (prescribe-vb e0 y u1 u2)))
(B (name diagnose) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (diagnose-vb e0 y x u2)))
(B (name misdiagnose) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (misdiagnose-vb e0 y x u2)))
(B (name alleviate) (=>(^(S#DISEASE x :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (alleviate-vb e0 y x u2)))
(B (name dissect) (=>(^(S#DISEASE u :0.3)(SS#TREATMENT e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (dissect-vb e0 y u1 u2)))

(B (name of-treatment) (=>(S#DISEASE y x :0.9)(^(SS#TREATMENT x)(of-in e1 x y))))

; CURE

(B (name cure) (=>(^(S#DISEASE u :0.45)(SS#CURE x  :0.45))(cure-nn e0 x)))
(B (name panacea) (=>(^(S#DISEASE u :0.45)(SS#CURE x  :0.45))(panacea-nn e0 x)))
(B (name cure-all)(=>(^(S#DISEASE x :0.45)(SS#CURE x :0.45)) (cure-all-nn e0 x)))

(B (name curevb) (=>(^(S#DISEASE x :0.3)(SS#CURE e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (cure-vb e0 y x u2)))
(B (name heal) (=>(^(S#DISEASE x :0.3)(SS#CURE e0 :0.3)(R#CURE-AGENT y e0 :0.3)) (heal-vb e0 y x u2)))

(B (name unrecoverable) (=>(^(S#DISEASE x :0.2)(SS#CURE e1  :0.2)(R#SICK y e1 :0.1))(unrecoverable-adj e1 y)))
(B (name incurable) (=>(^(S#DISEASE x :0.2)(SS#CURE e1  :0.2)(R#SICK y e1 :0.1)) (incurable-adj e1 y)))
(B (name miscurable) (=>(^(S#DISEASE x :0.2)(SS#CURE e1  :0.2)(R#SICK y e1 :0.1)) (miscurable-adj e1 y)))


(B (name recover) (=>(^(S#DISEASE x :0.3)(SS#CURE e0 :0.3)(R#SICK y x :0.3)) (recover-vb e0 y u1 u2)))
(B (name recuperate) (=>(^(S#DISEASE x :0.3)(SS#CURE e0 :0.3)(R#SICK y x :0.3)) (recuperate-vb e0 y u1 u2)))
(B (name convalesce) (=>(^(S#DISEASE x :0.3)(SS#CURE e0 :0.3)(R#SICK y x :0.3)) (convalesce-vb e0 y u1 u2)))

(B (name recovery) (=>(^(S#DISEASE x :0.45)(SS#CURE e0 :0.45)) (recovery-nn e1)))
(B (name recuperation) (=>(^(S#DISEASE x :0.3)(SS#CURE e0 :0.45)) (recuperation-nn e1)))
(B (name convalescence) (=>(^(S#DISEASE x :0.3)(SS#CURE e0 :0.45)) (convalescence-nn e1)))


; OF - CURE
(B (name for-cure) (=>(S#DISEASE y :0.9)(^(SS#CURE x)(for-in e1 x y))))

; FROM/AGAINST - CURE
; (B (name from-cure) (=>(S#DISEASE y :0.9)(^(SS#CURE e0)(from-in e1 e0 y))))
; (B (name against-cure) (=>(S#DISEASE y :0.9)(^(SS#CURE e0)(against-in e1 e0 y))))


; EPIDEMIC
(B (name epidemic) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE y :0.45)) (epidemic-nn e0 y)))
(B (name epidemic2) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE e0 :0.45)) (epidemic-adj e0 y)))
(B (name pandemia) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE y :0.45)) (pandemia-nn e0 y)))
(B (name pandemic) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE e0 :0.45)) (pandemic-adj e0 y)))
(B (name virus) (=>(^(S#DISEASE x :0.45)(SS#DISEASE-TYPE y :0.45)) (virus-nn e0 y)))

; OF - EPIDEMIC
(B (name of-epidemic) (=>(S#DISEASE y :0.9)(^(SS#DISEASE-TYPE x u)(of-in e1 x y))))

; SYMPTOM
(B (name symptom) (=>(^(S#DISEASE x :0.45) (SS#SYMPTOMS y :0.45)) (symptom-nn e0 y)))
(B (name symptomatic) (=>(^(S#DISEASE x :0.45) (SS#SYMPTOMS e0 :0.45)) (symptomatic-adj e0 y)))

(B (name bleeding) (=>(^(S#DISEASE x :0.45) (SS#SYMPTOMS e0 :0.45))(bleeding-adj e0 y)))
(B (name wound) (=>(^(S#DISEASE x :0.45) (SS#SYMPTOMS y :0.45)) (wound-nn e0 y)))
(B (name pain) (=>(^(S#DISEASE x :0.45) (SS#SYMPTOMS y :0.45)) (pain-nn e0 y)))
(B (name scar) (=>(^(S#DISEASE x :0.45) (SS#SYMPTOMS y :0.45)) (scar-nn e0 y)))
(B (name fever) (=>(^(S#DISEASE x :0.45) (SS#SYMPTOMS y :0.45)) (fever-nn e0 y)))

(B (name ache) (=>(^(S#DISEASE e0 :0.3)(SS#SYMPTOMS e0 :0.3)(R#SICK y e0 :0.3))(ache-vb e0 y u1 u2)))
(B (name bleed) (=>(^(S#DISEASE e0 :0.3)(SS#SYMPTOMS e0 :0.3)(R#SICK y e0 :0.3))(bleed-vb e0 y u1 u2)))

; OF - SYMPTOM
;(B (name of-symptom) (=>(S#DISEASE y :0.9)(^(SS#SYMPTOMS x)(of-in e1 x y))))

(B (name dismap)(=>(I#DISEASE x :0.9)(S#DISEASE x)))
(B (name dis-typemap)(=>(I#DISEASE-TYPE x :0.9)(S#DISEASE-TYPE x)))
(B (name curemap)(=>(I#CURE x :0.9)(SS#CURE x)))
(B (name treatmentmap)(=>(I#TREATMENT x :0.9)(SS#TREATMENT x)))

; CRIME

(B (name crime)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (crime-nn e0 x)))
(B (name offence)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (offence-nn e0 x)))
(B (name felony)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (felony-nn e0 x)))
(B (name delinquency)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (delinquency-nn e0 x)))

(B (name misdeed)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (misdeed-nn e0 x)))
(B (name malefaction)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (malefaction-nn e0 x)))
(B (name violation)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (violation-nn e0 x)))

(B (name guilty-conduct)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(^(guilty-adj e1 x)(conduct-nn e0 x))))
(B (name criminal-conduct)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(^(criminal-adj e1 x)(conduct-nn e0 x))))
(B (name public-wrong)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(^(public-adj e1 x)(wrong-nn e0 x))))
(B (name criminal-wrong)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(^(criminal-adj e1 x)(wrong-nn e0 x))))
(B (name criminal-act) (=>(S#CRIME e1 :0.9)(^(criminal-adj e1 x)(act-nn e0 x))))

(B (name bandit)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (bandit-nn e0 x)))
(B (name criminal)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (criminal-nn e0 x)))
(B (name criminal2)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (criminal-adj e0 x)))
(B (name delinquent)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (delinquent-nn e0 x)))
(B (name offender)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (offender-nn e0 x)))
(B (name outlaw)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (outlaw-nn e0 x)))
(B (name culprit)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (culprit-nn e0 x)))
(B (name malefactor)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (malefactor-nn e0 x)))
(B (name prostitute)(=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS x :0.3)(R#CRIME-AGENT x e0 :0.3)) (prostitute-nn e0 x)))

(B (name rape)(=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (rape-nn e0 x)))

(B (name rapev) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2)(R#CRIME-VICTIM y e0 :0.2)) (rape-vb e0 x y u)))

; THEFT
(B (name steal) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2)(R#CRIME-THEME z e0 :0.2)) (steal-vb e0 x z u2)))
(B (name pilfer) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (pilfer-vb e0 x z u2)))
(B (name filch) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (filch-vb e0 x z u2)))
(B (name pinch) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (pinch-vb e0 x z u2)))
(B (name plunder) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (plunder-vb e0 x z u2)))
(B (name pillage) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (pillage-vb e0 x z u2)))

(B (name theft) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (theft-nn e0 x)))
(B (name larceny) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (larceny-nn e0 x)))
(B (name stealage) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (stealage-nn e0 x)))
(B (name stealing) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (stealing-nn e0 x)))
(B (name thievery) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45)) (thievery-nn e0 x)))

(B (name robbery) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(robbery-nn e0 x)))
(B (name pillage) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(pillage-nn e0 x)))
(B (name plundering) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))( plundering-nn e0 x)))
(B (name booty) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(booty-nn e0 x)))
(B (name plunder) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(plunder-nn e0 x)))

(B (name thief) (=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS e0 :0.3)(R#CRIME-AGENT x e0 :0.3)) (thief-nn e0 x)))
(B (name pilferer) (=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS e0 :0.3)(R#CRIME-AGENT x e0 :0.3)) (pilferer-nn e0 x)))
(B (name mugger) (=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS e0 :0.3)(R#CRIME-AGENT x e0 :0.3)) (mugger-nn e0 x)))
(B (name robber) (=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS e0 :0.3)(R#CRIME-AGENT x e0 :0.3)) (robber-nn e0 x)))
(B (name burglar) (=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS e0 :0.3)(R#CRIME-AGENT x e0 :0.3)) (burglar-nn e0 x)))
(B (name plunderer) (=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS e0 :0.3)(R#CRIME-AGENT x e0 :0.3)) (plunderer-nn e0 x)))
(B (name plurdetor) (=>(^(S#CRIME e0 :0.3)(SS#PERPETRATORS e0 :0.3)(R#CRIME-AGENT x e0 :0.3)) (plurdetor-nn e0 x)))

(B (name rob) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2)(R#CRIME-VICTIM y e0 :0.2)) (rob-vb e0 x y u)))
(B (name mug) (=>(^(S#CRIME e0 :0.2)(SS#CRIME-TYPE e0 :0.2)(R#CRIME-AGENT x e0 :0.2)(R#CRIME-VICTIM y e0 :0.2)) (mug-vb e0 x y u)))

; FROM - CRIME
(B (name from-theft) (=>(R#CRIME-VICTIM y :0.9)(^(SS#CRIME-TYPE e0)(from-in e1 e0 y))))

(B (name violence) (=>(^(S#CRIME x :0.45)(SS#CRIME-TYPE x :0.45))(violence-nn e0 x)))

(B (name crimemap)(=>(I#CRIME x :0.9)(S#CRIME x)))
(B (name crime-typemap)(=>(I#CRIME-TYPE x :0.9)(SS#CRIME-TYPE x)))
(B (name theftmap)(=>(I#THEFT x :0.9)(SS#THEFT x)))
(B (name perpetratorsmap)(=>(I#PERPETRATORS x :0.9)(SS#PERPETRATORS x)))

; PUNISHMENT
(B (name punishment)(=>(^(S#CRIME u :0.45)(SS#PUNISHMENT x :0.45)) (punishment-nn e0 x)))
(B (name penalty)(=>(^(S#CRIME u :0.45)(SS#PUNISHMENT x :0.45)) (penalty-nn e0 x)))
(B (name sentence)(=>(^(S#CRIME u :0.45)(SS#PUNISHMENT x :0.45)) (sentence-nn e0 x)))
(B (name conviction)(=>(^(S#CRIME u :0.45)(SS#PUNISHMENT x :0.45)) (conviction-nn e0 x)))
(B (name mulct)(=>(^(S#CRIME u :0.45)(SS#PUNISHMENT x :0.45)) (mulct-nn e0 x)))
(B (name fine)(=>(^(S#CRIME u :0.45)(SS#PUNISHMENT x :0.45)) (fine-nn e0 x)))
(B (name scourge)(=>(^(S#CRIME u :0.45)(SS#PUNISHMENT x :0.45)) (scourge-nn e0 x)))

(B (name prison-sentence)(=>(^(S#CRIME y :0.45)(SS#PUNISHMENT y :0.45)) (^(prison-nn e0 x)(of-in e1 y x)(sentence-nn e2 y))))
(B (name life-sentence)(=>(^(S#CRIME y :0.45)(SS#PUNISHMENT y :0.45)) (^(life-nn e0 x)(of-in e1 y x)(sentence-nn e2 y))))

(B (name punish) (=>(^(S#CRIME e0 :0.2)(SS#PUNISHMENT e0 :0.2)(R#PUNISHMENT-AGENT x e0 :0.2)(R#PUNISHMENT-VICTIM y e0 :0.2))(punish-vb e0 x y u)))
(B (name punishmentmap)(=>(I#PUNISHMENT x :0.9)(SS#PUNISHMENT x)))

; CONFINEMENT
; CONFINED-SPACE
(B (name prison) (=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (prison-nn e0 x)))
(B (name jail) (=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (jail-nn e0 x)))
(B (name cage) (=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (cage-nn e0 x)))
(B (name dungeon) (=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (dungeon-nn e0 x)))
(B (name penitentiary) (=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (penitentiary-nn e0 x)))
(B (name dead-end) (=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (dead-end-nn e0 x)))
(B (name alcatraz)(=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (alcatraz-nn e0 x)))
(B (name cell)(=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (cell-nn e0 x)))
(B (name closet)(=>(^(S#CONFINEMENT x :0.45)(SS#CONFINED-SPACE x :0.45)) (closet-nn e0 x)))
;add prison cell, jail cell

(B (name imprison) (=>(^(S#CONFINEMENT e0 :0.2)(SS#CONFINED-SPACE e0 :0.2)(R#CONFINEMENT-AGENT x e0 :0.2)(R#CONFINEMENT-PATIENT y e0 :0.2))(imprison-vb e0 x y u)))
(B (name confine) (=>(^(S#CONFINEMENT e0 :0.2)(SS#CONFINED-SPACE e0 :0.2)(R#CONFINEMENT-AGENT x e0 :0.2)(R#CONFINEMENT-PATIENT y e0 :0.2))(confine-vb e0 x y u)))
(B (name incarcerate) (=>(^(S#CONFINEMENT e0 :0.2)(SS#CONFINED-SPACE e0 :0.2)(R#CONFINEMENT-AGENT x e0 :0.2)(R#CONFINEMENT-PATIENT y e0 :0.2))(incarcerate-vb e0 x y u)))

; RESTRAINTS
(B (name trap) (=>(^(S#CONFINEMENT u :0.45)(SS#RESTRAINTS x :0.45)) (trap-nn e0 x)))
(B (name net) (=>(^(S#CONFINEMENT u :0.45)(SS#RESTRAINTS x :0.45))(net-nn e0 x)))
(B (name handcuffs) (=>(^(S#CONFINEMENT u :0.45)(SS#RESTRAINTS x :0.45))(handcuff-nn e0 x)))
(B (name chain) (=>(^(S#CONFINEMENT u :0.45)(SS#RESTRAINTS x :0.45))(chain-nn e0 x)))
(B (name bondage) (=>(^(S#CONFINEMENT u :0.45)(SS#RESTRAINTS x :0.45))(bondage-nn e0 x)))
(B (name bond) (=>(^(S#CONFINEMENT u :0.45)(SS#RESTRAINTS x :0.45))(bond-nn e0 x)))
(B (name grip) (=>(^(S#CONFINEMENT e0 :0.45)(SS#RESTRAINTS x :0.45))(grip-nn e0 x)))

(B (name catch) (=>(^(S#CONFINEMENT e0 :0.2)(SS#RESTRAINTS e0 :0.2)(R#CONFINEMENT-AGENT x e0 :0.2)(R#CONFINEMENT-PATIENT y e0 :0.2))(catch-vb e0 x y u)))
(B (name grip) (=>(^(S#CONFINEMENT e0 :0.2)(SS#RESTRAINTS e0 :0.2)(R#CONFINEMENT-AGENT x e0 :0.2)(R#CONFINEMENT-PATIENT y e0 :0.2))(grip-vb e0 x y u)))
(B (name handcuff) (=>(^(S#CONFINEMENT e0 :0.2)(SS#RESTRAINTS e0 :0.2)(R#CONFINEMENT-AGENT x e0 :0.2)(R#CONFINEMENT-PATIENT y e0 :0.2))(handcuff-vb e0 x y u)))


(B (name confinementmap)(=>(I#CONFINEMENT x :0.9)(S#CONFINEMENT x)))
(B (name confinedspacemap)(=>(I#CONFINEDSPACE x :0.9)(SS#CONFINEDSPACE x)))
(B (name restraintsmap)(=>(I#CONFINEDSPACE x :0.9)(SS#RESTRAINTS x)))

; EXIT
(B (name door)(=>(^(S#CONFINEMENT u :0.45)(SS#CONFINEMENT-EXIT x :0.45)) (door-nn e0 x)))
(B (name ladder)(=>(^(S#CONFINEMENT u :0.45)(SS#CONFINEMENT-EXIT x :0.45)) (ladder-nn e0 x)))
(B (name rope)(=>(^(S#CONFINEMENT u :0.45)(SS#CONFINEMENT-EXIT x :0.45)) (rope-nn e0 x)))
(B (name trampoline)(=>(^(S#CONFINEMENT u :0.45)(SS#CONFINEMENT-EXIT x :0.45)) (trampoline-nn e0 x)))
(B (name lifeline)(=>(^(S#CONFINEMENT u :0.45)(SS#CONFINEMENT-EXIT x :0.45)) (lifeline-nn e0 x)))
(B (name escape)(=>(^(S#CONFINEMENT u :0.45)(SS#CONFINEMENT-EXIT x :0.45)) (escape-nn e0 x)))

(B (name escape)(=>(^(S#CONFINEMENT e0 :0.3)(SS#CONFINEMENT-EXIT e0 :0.3)(R#ESCAPE-AGENT x e0 :0.3)) (escape-vb e0 x y u)))
(B (name get-out-of)(=>(^(S#CONFINEMENT e0 :0.3)(SS#CONFINEMENT-EXIT e0 :0.3)(R#ESCAPE-AGENT x e0 :0.3)) (^(get-vb e0 x y u)(out-in e1 e0 z)(of-in e2 e1 w))))
(B (name break-out)(=>(^(S#CONFINEMENT e0 :0.3)(SS#CONFINEMENT-EXIT e0 :0.3)(R#ESCAPE-AGENT x e0 :0.3)) (^(get-vb e0 x y u)(out-in e1 e0 z))))
(B (name liberate)(=>(^(S#CONFINEMENT u1 :0.3)(SS#CONFINEMENT-EXIT e0 :0.3)(R#EXIT-AGENT x e0 :0.3) (R#EXIT-PATIENT y e0 :0.3)) (liberate-vb e0 x y u)))

(B (name exitmap)(=>(I#CONFINEMENT-EXIT x :0.9)(SS#CONFINEMENT-EXIT x)))

(B (name slavery) (=>(^(S#SLAVERY x :0.45)(SS#SLAVERY-TYPE x :0.45))(slavery-nn e0 x)))
(B (name enslavement) (=>(^(S#SLAVERY x :0.45)(SS#SLAVERY-TYPE x :0.45))(enslavement-nn e0 x)))
(B (name slave) (=>(^(S#SLAVERY e0 :0.3)(SS#SLAVERY-TYPE e0 :0.3)(R#SLAVERY-PATIENT x e0 :0.3))(slave-nn e0 x)))
(B (name enslave) (=>(^(S#SLAVERY e0 :0.2)(SS#SLAVERY-TYPE e0 :0.2)(R#SLAVERY-PATIENT y e0 :0.2)(R#SLAVERY-AGENT x e0 :0.2))(enslave-nn e0 x y u)))

(B (name slaverymap)(=>(I#SLAVERY x :0.9)(S#SLAVERY x)))
(B (name slaverytypemap)(=>(I#SLAVERY-TYPE x :0.9)(S#SLAVERY-TYPE x)))

; BODY-OF-WATER

(B (name water) (=> (^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-TYPE x :0.45))(water-nn e0 x)))
(B (name sea-water) (=> (^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-TYPE x :0.45)) (sea-water-nn e0 x)))

(B (name sea) (=> (^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-TYPE x :0.45)) (sea-nn e0 y)))
(B (name ocean) (=> (^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-TYPE x :0.45)) (ocean-nn e0 y)))
(B (name river) (=> (^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-TYPE x :0.45)) (river-nn e0 y)))

; OF - BODY-OF-WATER
(B (name of-body-of-water) (=>(R#MATTER x y :0.9)(^(SS#BODY-OF-WATER-TYPE y)(of-in e1 y x))))


; DRINK
(B (name drink) (=>(^(S#BODY-OF-WATER u :0.2)(SS#DRINK e0 y :0.2)(R#DRINKER x e0 :0.2)(R#MATTER y u :0.2)) (drink-vb e0 x y u2)))
(B (name gulp) (=>(^(S#BODY-OF-WATER u :0.2)(SS#DRINK e0 y :0.2)(R#DRINKER x e0 :0.2)(R#MATTER y u :0.2))  (gulp-vb e0 x y u2)))
(B (name imbibe) (=>(^(S#BODY-OF-WATER u :0.2)(SS#DRINK e0 y :0.2)(R#DRINKER x e0 :0.2)(R#MATTER y u :0.2))  (imbibe-vb e0 x y u2)))
(B (name quaff) (=>(^(S#BODY-OF-WATER u :0.2)(SS#DRINK e0 y :0.2)(R#DRINKER x e0 :0.2)(R#MATTER y u :0.2))  (quaff-vb e0 x y u2)))
(B (name sip) (=>(^(S#BODY-OF-WATER u :0.2)(SS#DRINK e0 y :0.2)(R#DRINKER x e0 :0.2)(R#MATTER y u :0.2))  (sip-vb e0 x y u2)))

(B (name drink2) (=>(^(S#BODY-OF-WATER y :0.45) (SS#DRINK x y :0.45))(drink-nn e0 x)))
(B (name gulp) (=>(^(S#BODY-OF-WATER y :0.45) (SS#DRINK x y :0.45))(gulp-nn e0 x)))
(B (name sip) (=>(^(S#BODY-OF-WATER y :0.45) (SS#DRINK x y :0.45))(sip-nn e0 x)))
(B (name swig) (=>(^(S#BODY-OF-WATER y :0.45) (SS#DRINK x y :0.45))(swig-nn e0 x)))

; THIRST
(B (name thirst) (=>(^(S#BODY-OF-WATER y :0.3) (SS#THIRST x :0.3)(R#DRINKER x e0 :0.3))(thirst-nn e0 x)))
(B (name thirsty) (=>(^(S#BODY-OF-WATER y :0.3) (SS#THIRST e0 :0.3)(R#DRINKER x e0 :0.3))(thirsty-adj e0 x)))
(B (name thirstier) (=>(^(S#BODY-OF-WATER y :0.3) (SS#THIRST e0 :0.3)(R#DRINKER x e0 :0.3))(thirstier-adj e0 x)))

; OF - THIRST
(B (name of-thirst) (=>(R#THIRST-OBJECT y x :0.9)(^(SS#THIRST x)(of-in e1 x y))))


; MOVEMENT
(B (name flow) (=>(^(S#BODY-OF-WATER y :0.3)(SS#BODY-OF-WATER-MOVEMENT e0 :0.3)(R#STREAMING x e0 :0.3))(flow-vb e0 x u1 u2)))
(B (name leak) (=>(^(S#BODY-OF-WATER y :0.3)(SS#BODY-OF-WATER-MOVEMENT e0 :0.3)(R#STREAMING x e0 :0.3))(leak-vb e0 x u1 u2)))
(B (name stream) (=>(^(S#BODY-OF-WATER y :0.3)(SS#BODY-OF-WATER-MOVEMENT e0 :0.3)(R#STREAMING x e0 :0.3))(stream-vb e0 x u1 u2)))

(B (name stream2) (=>(^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-MOVEMENT y :0.45))(stream-nn e0 y)))
(B (name flow2) (=>(^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-MOVEMENT y  :0.45))(flow-nn e0 y)))
(B (name leak2) (=>(^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-MOVEMENT y  :0.45))(leak-nn e0 y)))
(B (name wave) (=>(^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-MOVEMENT y  :0.45))(wave-nn e0 y)))
(B (name tide) (=>(^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-MOVEMENT y  :0.45))(tide-nn e0 y)))
(B (name rising-tide) (=>(^(S#BODY-OF-WATER y :0.45)(SS#BODY-OF-WATER-MOVEMENT x  :0.45)) (^(rising-adj e0 x)(tide-nn e1 x))))
(B (name flood) (=>(^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-MOVEMENT y  :0.45))(flood-nn e0 y)))

; OF - MOVEMENT
(B (name of-stream) (=>(R#STREAMING y x :0.9)(^(SS#BODY-OF-WATER-MOVEMENT x e)(of-in e1 x y))))

; DANGER
(B (name tsunami) (=>(^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-DANGER y :0.45))(tsunami-nn e0 y)))
(B (name underwater) (=>(^(S#BODY-OF-WATER x :0.45)(SS#BODY-OF-WATER-DANGER y :0.45))(underwater-nn e0 y)))

(B (name drown) (=>(^(S#BODY-OF-WATER y :0.3)(SS#BODY-OF-WATER-DANGER e0 :0.3)(R#DROWN-PATIENT x e0 :0.3))(drown-vb e0 x u1 u2)))

(B (name watermap)(=>(I#BODY-OF-WATER x :0.9)(S#BODY-OF-WATER x)))
(B (name watertypemap)(=>(I#BODY-OF-WATER-TYPE x :0.9)(SS#BODY-OF-WATER-TYPE x)))
(B (name drinkmap)(=>(I#DRINK x y :0.9)(SS#DRINK x y)))
(B (name thirstmap)(=>(I#THIRST x y :0.9)(SS#THIRST x y)))
(B (name streammap)(=>(I#BODY-OF-WATER-MOVEMENT x :0.9)(SS#BODY-OF-WATER-MOVEMENT x)))

; MATERIAL

; CUT
(B (name cut) (=>(^(S#MATERIAL y :0.3)(SS#CUT e0 y :0.3)(R#CUT-AGENT x e0 :0.3))(cut-vb e0 x y u2)))
(B (name cut2) (=>(^(S#MATERIAL y :0.45)(SS#CUT e0 y :0.45))(^(nn e1 x y)(cut-nn e0 x))))
(B (name cut3) (=>(^(S#MATERIAL y :0.45)(SS#CUT e0 y :0.45))(^(of-in e1 x y)(cut-nn e0 x))))
(B (name cut4) (=>(^(S#MATERIAL y :0.48)(SS#CUT e0 y :0.48))(cut-nn e0 x)))

(B (name materialmap)(=>(I#MATERIAL x :0.9)(S#MATERIAL x)))
(B (name cutmap)(=>(I#CUT x y :0.9)(SS#CUT x y)))

; ORGANISM

; GROWTH
(B (name grow) (=>(^(S#ORGANISM x :0.45)(SS#GROW e0 x :0.45))(grow-vb e0 x u1 u2)))
(B (name growth2) (=>(^(S#ORGANISM y :0.45)(SS#GROW e0 y :0.45))(^(nn e1 x y)(growth-nn e0 x))))
(B (name of-growth) (=>(^(S#ORGANISM y :0.45)(SS#GROW e0 y :0.45))(^(of-in e1 x y)(growth-nn e0 x))))
(B (name growth) (=>(^(S#ORGANISM y :0.47)(SS#GROW e0 y :0.47))(growth-nn e0 x)))

(B (name organismmap)(=>(I#ORGANISM x :0.9)(S#ORGANISM x)))
(B (name growmap)(=>(I#GROW x y :0.9)(SS#GROW x y)))

; BATTLE

(B (name war) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45))(war-nn e0 x)))
(B (name fight) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45))(fight-nn e0 x)))
(B (name struggle) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45))(struggle-nn e0 x)))
(B (name combat) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45))(combat-nn e0 x)))
(B (name battle) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45))(battle-nn e0 x)))
(B (name gunfight) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45))(gunfight-nn e0 x)))
(B (name gunshot) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45))(gunshot-nn e0 x)))

(B (name attack) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45)) (attack-nn e0 x)))
(B (name assault) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45)) (assault-nn e0 x)))
(B (name blitz) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45)) (blitz-nn e0 x)))
(B (name barrage) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45)) (barrage-nn e0 x)))
; I'm not sure this fits here
;(B (name insult) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45)) (insult-nn e0 x)))
(B (name invasion) (=>(^(S#BATTLE x :0.45)(SS#FIGHT x :0.45)) (invasion-nn e0 x)))

(B (name combat) (=>(^(S#BATTLE e0 :0.3) (SS#FIGHT e0 :0.3)(R#BATTLE-AGENT x e0 :0.3))(combat-vb e0 x u1 u2)))
(B (name struggle) (=>(^(S#BATTLE e0 :0.3) (SS#FIGHT e0 :0.3)(R#BATTLE-AGENT x e0 :0.3))(struggle-vb e0 x u1 u2)))
(B (name battle) (=>(^(S#BATTLE e0 :0.3) (SS#FIGHT e0 :0.3)(R#BATTLE-AGENT x e0 :0.3))(battle-vb e0 x u1 u2)))
(B (name fight) (=>(^(S#BATTLE e0 :0.3) (SS#FIGHT e0 :0.3)(R#BATTLE-AGENT x e0 :0.3))(fight-vb e0 x u1 u2)))
(B (name combat) (=>(^(S#BATTLE e0 :0.3) (SS#FIGHT e0 :0.3)(R#BATTLE-AGENT x e0 :0.3))(combat-vb e0 x u1 u2)))

(B (name attack) (=>(^(S#BATTLE u :0.2) (SS#FIGHT e0 :0.2)(R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (attack-vb e0 x y u2)))
(B (name bombvb) (=>(^(S#BATTLE u :0.2) (SS#FIGHT e0 :0.2)(R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (bomb-vb e0 x y u2)))
(B (name assail) (=>(^(S#BATTLE u :0.2) (SS#FIGHT e0 :0.2)(R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (assail-vb e0 x y u2)))
(B (name insult) (=>(^(S#BATTLE u :0.2) (SS#FIGHT e0 :0.2)(R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (insult-vb e0 x y u2)))
(B (name charge) (=>(^(S#BATTLE u :0.2) (SS#FIGHT e0 :0.2)(R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (charge-vb e0 x y u2)))
(B (name invade) (=>(^(S#BATTLE u :0.2) (SS#FIGHT e0 :0.2)(R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (invade-vb e0 x y u2)))

(B (name fight-with) (=> (S#BATTLE y x :0.90)(^(SS#FIGHT x)(with-in x y))))
(B (name fight-against) (=> (S#BATTLE y x :0.90)(^(SS#FIGHT x)(against-in x y))))
(B (name fight-of) (=> (R#BATTLE-AGENT y x :0.90)(^(SS#FIGHT x)(of-in x y))))
(B (name fight-on) (=> (R#BATTLE-AGENT y x :0.90)(^(SS#FIGHT x)(on-in x y))))
(B (name fight-at) (=> (R#BATTLE-AGENT y x :0.90)(^(SS#FIGHT x)(at-in x y))))

(B (name enemy) (=>(^(S#BATTLE u :0.3) (SS#ENEMY x u :0.3))(enemy-nn e1 x)))
(B (name adversary) (=>(^(S#BATTLE u :0.3) (SS#ENEMY x u :0.3))(adversary-nn e1 x)))
(B (name rival) (=>(^(S#BATTLE u :0.3) (SS#ENEMY x u :0.3))(rival-nn e1 x)))
(B (name opponent) (=>(^(S#BATTLE u :0.3) (SS#ENEMY x u :0.3))(opponent-nn e1 x)))

(B (name enemy-of) (=> (R#BATTLE-AGENT y e0 :0.90)(^(SS#ENEMY x e0)(of-in e1 x y))))


(B (name soldier) (=>(^(S#BATTLE x :0.45)(SS#FIGHT y :0.45))(soldier-nn e0 y)))
(B (name army) (=>(^(S#BATTLE x :0.45)(SS#FIGHT y :0.45))(army-nn e0 y)))
(B (name gunner) (=>(^(S#BATTLE x :0.45)(SS#FIGHT y :0.45))(gunner-nn e0 y)))
(B (name shooter) (=>(^(S#BATTLE x :0.45)(SS#FIGHT y :0.45))(shooter-nn e0 y)))

(B (name weapon) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(weapon-nn e0 y)))
(B (name gun) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(gun-nn e0 y)))
(B (name knife) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(knife-nn e0 y)))
(B (name bomb) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(bomb-nn e0 y)))
(B (name shotgun) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(shotgun-nn e0 y)))
(B (name firearm) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(firearm-nn e0 y)))
(B (name artillery) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(artillery-nn e0 y)))
(B (name revolver) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(revolver-nn e0 y)))
(B (name sword) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(sword-nn e0 y)))
(B (name rapier) (=>(^(S#BATTLE x :0.45)(SS#WEAPON y :0.45))(rapier-nn e0 y)))
(B (name ammunition)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45))(ammunition-nn e0 x)))
(B (name barrel)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (barrel-nn e0 x)))
(B (name bayonet)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (bayonet-nn e0 x)))
(B (name bb-gun)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (^(bb-nn e1 y)(of-in e2 e0 e1)(gun-nn e0 x))))
(B (name blowgun)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (blowgun-nn e0 x)))
(B (name bomb)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (bomb-nn e0 x)))
(B (name bullet)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (bullet-nn e0 x)))
(B (name cannon)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (cannon-nn e0 x)))
(B (name cap-gun)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (^(cap-nn e1 y)(of-in e2 e0 e1)(gun-nn e0 x))))
(B (name glock)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (glock-nn e0 x)))
(B (name handgun)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (handgun-nn e0 x)))
(B (name holster)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (holster-nn e0 x)))
(B (name laser)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (laser-nn e0 x)))
(B (name machine-gun)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (^(machine-nn e1 y)(of-in e2 e0 e1)(gun-nn e0 x))))
(B (name minigun)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (minigun-nn e0 x)))
(B (name musket)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (musket-nn e0 x)))
(B (name pistol)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (pistol-nn e0 x)))
(B (name popgun)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (popgun-nn e0 x)))
(B (name rifle)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (rifle-nn e0 x)))
(B (name spear)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (spear-nn e0 x)))
(B (name trigger)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (trigger-nn e0 x)))
(B (name uzi)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (uzi-nn e0 x)))
(B (name zipgun)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (zipgun-nn e0 x)))

(B (name armory)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45))(armory-nn e0 x)))
(B (name arsenal)(=>(^(S#BATTLE x :0.45)(SS#WEAPON x :0.45)) (arsenal-nn e0 x)))

(B (name battlemap)(=>(I#BATTLE x y :0.9)(S#BATTLE x y)))
(B (name fightmap)(=>(I#FIGHT x :0.9)(SS#FIGHT x)))
(B (name enemymap)(=>(I#ENEMY x y :0.9)(SS#ENEMY x y)))
(B (name weaponmap)(=>(I#WEAPON x y :0.9)(SS#WEAPON x y)))


; ABYSS

(B (name abyss) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (abyss-nn e0 x)))
(B (name hell) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (hell-nn e0 x)))
(B (name sinkhole) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (sinkhole-nn e0 x)))
(B (name hole) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (hole-nn e0 x)))
(B (name chasm) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (chasm-nn e0 x)))
(B (name pit) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (pit-nn e0 x)))
(B (name cave) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (cave-nn e0 x)))
(B (name abysm) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (abysm-nn e0 x)))
(B (name trench) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (trench-nn e0 x)))
(B (name black-hole) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (^(black-adj e0 x)(hole-nn e1 x))))
(B (name gaping-maw) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (^(gap-vb e0 x u1 u2)(maw-nn e1 x))))
(B (name dark-hole) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (^(dark-adj e0 x)(hole-nn e1 x))))
(B (name bottomless-pit) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-TYPE x :0.45)) (^(bottomless-adj e0 x)(pit-nn e1 x))))

(B (name abyssal) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS-TYPE e0 e0 :0.45)) (abyssal-adj e0 x)))
(B (name abysmal) (=>(^(S#ABYSS e0 :0.45)(SS#ABYSS-TYPE e0 e0 :0.45)) (abysmal-adj e0 x)))

; DEPTH
(B (name depth) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-DEPTH x :0.45)) (depth-nn e0 x)))
(B (name deep) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-DEPTH x :0.45)) (deep-nn e0 x)))
(B (name deep2) (=>(^(S#ABYSS x :0.3)(SS#ABYSS-DEPTH e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (deep-adj e0 x)))
(B (name deeper) (=>(^(S#ABYSS x :0.3)(SS#ABYSS-DEPTH e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (deeper-adj e0 x)))
(B (name deepest) (=>(^(S#ABYSS x :0.3)(SS#ABYSS-DEPTH e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (deepest-adj e0 x)))
(B (name deep3) (=>(^(S#ABYSS x :0.45)(SS#ABYSS-DEPTH e0 :0.45)) (deeply-rb e0 x)))
(B (name ever-deepening) (=>(^(S#ABYSS x :0.3)(SS#ABYSS-DEPTH e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (ever-deepening-adj e0 x)))

(B (name depth-of) (=> (R#ABYSS-THEME y x :0.90)(^(SS#ABYSS-DEPTH x)(of-in e1 x y))))

; ENTRANCE

(B (name push-into) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-ENTRANCE e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-CAUSE x e0 :0.2)) (^(push-vb e0 x y u2)(into-in e1 e0 z))))
(B (name drive-into)(=>(^(S#ABYSS z :0.2)(SS#ABYSS-ENTRANCE e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-CAUSE x e0 :0.2)) (^(drive-vb e0 x y u2)(into-in e1 e0 z))))
(B (name suck-into) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-ENTRANCE e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-CAUSE x e0 :0.2)) (^(suck-vb e0 x y u2)(into-in e1 e0 z))))
(B (name drag-into) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-ENTRANCE e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-CAUSE x e0 :0.2)) (^(drag-vb e0 x y u2)(into-in e1 e0 z))))
(B (name descend-into) (=>(^(S#ABYSS z :0.3)(SS#ABYSS-ENTRANCE e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (^(descend-vb e0 x y u2)(into-in e1 e0 z))))
(B (name sink-into) (=>(^(S#ABYSS z :0.3)(SS#ABYSS-ENTRANCE e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (^(sink-vb e0 x y u2)(into-in e1 e0 z))))
(B (name plunge-into) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-ENTRANCE e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-CAUSE x e0 :0.2)) (^(plunge-vb e0 x y u2)(into-in e1 e0 z))))
(B (name plunge-into2) (=>(^(S#ABYSS z :0.3)(SS#ABYSS-ENTRANCE e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (^(plunge-vb e0 x y u2)(into-in e1 e0 z))))
(B (name throw-into) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-ENTRANCE e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-CAUSE x e0 :0.2)) (^(throw-vb e0 x y u2)(into-in e1 e0 z))))
(B (name fall-into) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-ENTRANCE e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-CAUSE x e0 :0.2)) (^(fall-vb e0 x y u2)(into-in e1 e0 z))))


; EXIT

(B (name climb-out-of) (=>(^(S#ABYSS z :0.3)(SS#ABYSS-EXIT e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (^(climb-vb e0 x y u) (out-in e1 e0 w)(of-in e2 e1 z))))
(B (name jump-out-of) (=>(^(S#ABYSS z :0.3)(SS#ABYSS-EXIT e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (^(jump-vb e0 x y u) (out-in e1 e0 w) (of-in e2 e1 z))))

(B (name pull-out-of) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-EXIT e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(pull-vb e0 x y u)(out-in e1 e0 w)(of-in e2 e1 z))))
(B (name lift-out-of) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-EXIT e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(lift-vb e0 x y u) (out-in e1 e0 w) (of-in e2 e1 z))))
(B (name yank-out-of) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-EXIT e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(yank-vb e0 x y u) (out-in e1 e0 w)(of-in e2 e1 z))))
(B (name dig-out-of) (=>(^(S#ABYSSan  z :0.2)(SS#ABYSS-EXIT e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(dig-vb e0 x y u) (out-in e1 e0 w)(of-in e2 e1 z))))
(B (name emerge-from) (=>(^(S#ABYSS z :0.3)(SS#ABYSS-EXIT e0 :0.3)(R#ABYSS-THEME x e0 :0.3)) (^(emerge-vb e0 x y u)(out-in e1 e0 w)(from-in e2 e1 z))))
(B (name help-out-of) (=>(^(S#ABYSS z :0.2)(SS#ABYSS-EXIT e0 :0.2)(R#ABYSS-THEME y e0 :0.2)(R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^(help-vb e0 x y u)(out-in e1 e0 w)(of-in e2 e1 z))))

(B (name abyssmap)(=>(I#ABYSS x :0.9)(S#ABYSS x)))
(B (name abysstypemap)(=>(I#ABYSS-TYPE x :0.9)(SS#ABYSS-TYPE x)))
(B (name abyssentrancemap)(=>(I#ABYSS-ENTRANCE x :0.9)(SS#ABYSS-ENTRANCE x)))
(B (name abyssexitmap)(=>(I#ABYSS-EXIT x :0.9)(SS#ABYSS-EXIT x)))

; BURDEN
; WEIGHT
(B (name burden) (=>(^(S#BURDEN x :0.45)(SS#WEIGHT x :0.45)) (burden-nn e0 x)))
(B (name weight) (=>(^(S#BURDEN x :0.45)(SS#WEIGHT x :0.45)) (weight-nn e0 x)))
(B (name load) (=>(^(S#BURDEN x :0.45)(SS#WEIGHT x :0.45)) (load-nn e0 x)))
(B (name loading) (=>(^(S#BURDEN x :0.45)(SS#WEIGHT x :0.45)) (loading-nn e0 x)))
(B (name millstone) (=>(^(S#BURDEN x :0.45)(SS#WEIGHT x :0.45)) (millstone-nn e0 x)))
(B (name encumbrance) (=>(^(S#BURDEN x :0.45)(SS#WEIGHT x :0.45)) (encumbrance-nn e0 x)))

(B (name heavy) (=>(^(S#BURDEN e0 :0.45)(SS#WEIGHT e0 :0.45)) (heavy-adj e0 x)))
(B (name heavy-weight) (=>(^(S#BURDEN y :0.45)(SS#WEIGHT y :0.45)) (^(heavy-adj e0 x)(weight-nn e1 y))))
(B (name heavy-load) (=>(^(S#BURDEN y :0.45)(SS#WEIGHT y :0.45)) (^(heavy-adj e0 x)(load-nn e1 y))))

(B (name loadvb) (=>(^(S#BURDEN e0 :0.2)(SS#WEIGHT e0 :0.2)(R#BURDEN-CAUSE x e0 :0.2)(R#BURDEN-VICTIM y e0 :0.2)) (load-vb e0 x y u)))
(B (name burthen) (=>(^(S#BURDEN e0 :0.2)(SS#WEIGHT e0 :0.2)(R#BURDEN-CAUSE x e0 :0.2)(R#BURDEN-VICTIM y e0 :0.2)) (burthen-vb e0 x y u)))
(B (name burden) (=>(^(S#BURDEN e0 :0.2)(SS#WEIGHT e0 :0.2)(R#BURDEN-CAUSE x e0 :0.2)(R#BURDEN-VICTIM y e0 :0.2)) (burden-vb e0 x y u)))

(B (name weightvb) (=>(^(S#BURDEN e0 :0.45)(SS#WEIGHT e0 :0.45)) (weight-vb e0 x y u)))

;RELIEF
(B (name relief) (=>(^(S#BURDEN x :0.45)(SS#RELIEF x :0.45)) (relief-nn e0 x)))
(B (name ease) (=>(^(S#BURDEN x :0.45)(SS#RELIEF x :0.45)) (ease-nn e0 x)))
(B (name easing) (=>(^(S#BURDEN x :0.45)(SS#RELIEF x :0.45)) (easing-nn e0 x)))
(B (name lightening) (=>(^(S#BURDEN x :0.45)(SS#RELIEF x :0.45)) (lightening-nn e0 x)))

(B (name lighten) (=>(^(S#BURDEN x :0.2)(SS#RELIEF x :0.2)(R#CAUSE-RELIEF x e0)(R#BURDEN-VICTIM y e0 :0.2)) (lighten-vb e0 x y u)))
(B (name easevb) (=>(^(S#BURDEN x :0.2)(SS#RELIEF x :0.2)(R#CAUSE-RELIEF x e0)(R#BURDEN-VICTIM y e0 :0.2)) (ease-vb e0 x y u)))

(B (name evasion) (=>(^(S#BURDEN x :0.45)(SS#RELIEF x :0.45)) (evasion-nn e0 x)))
(B (name tax-evasion) (=>(^(S#BURDEN x :0.45)(SS#RELIEF x :0.45)) (^(tax-nn e0 x)(of-in e1 y x)(evasion-nn e2 y))))

(B (name evade) (=>(^(S#BURDEN x :0.3)(SS#RELIEF x :0.3)(R#EVADE-AGENT x e0 :0.3)) (evade-vb e0 x y u)))

:PHYSICAL DISTRESS
(B (name unsustainable)(=>(^(S#BURDEN x :0.45)(SS#PHYISCAL-DISTRESS e0 :0.45)) (unsustainable-adj e0 y)))

(B (name overwhelm)(=>(^(S#BURDEN e0 :0.3)(SS#PHYISCAL-DISTRESS e0 :0.3)(R#BURDEN-CAUSE x e0 :0.3)) (overwhelm-vb e0 x y u)))

(B (name burdenmap) (=>(I#BURDEN  x :0.9) (S#BURDEN x)))
(B (name weightmap) (=>(I#WEIGHT  x :0.9) (SS#WEIGHT x)))
(B (name reliefmap) (=>(I#RELIEF  x :0.9) (SS#RELIEF x)))

; PHYSICAL HARM
; TYPE
(B (name hurt) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(hurt-vb e0 x y u2)))
(B (name beat) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(beat-vb e0 x y u2)))
(B (name crush) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(crush-vb e0 x y u2)))
(B (name harm) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(harm-vb e0 x y u2)))
(B (name screw) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(screw-vb e0 x y u2)))
(B (name torture) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(torture-vb e0 x y u2)))
(B (name maim) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(maim-vb e0 x y u2)))
(B (name traumatize) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(traumatize-vb e0 x y u2)))
(B (name injure) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(injure-vb e0 x y u2)))
; (B (name hobble) (=>(^(S#PHYSICAL-HARM e0 :0.2)(SS#PHYSICAL-HARM-TYPE e0 :0.2)(R#HARM-VICTIM y e0 :0.2)(R#HARM-AGENT x e0 :0.2))(hobble-vb e0 x y u2)))

(B (name hurtn) (=>(^(S#PHYSICAL-HARM x :0.2)(SS#PHYSICAL-HARM-TYPE x :0.2))(hurt-nn e0 x)))
(B (name crushn) (=>(^(S#PHYSICAL-HARM x :0.2)(SS#PHYSICAL-HARM-TYPE x :0.2))(crush-nn e0 x)))
(B (name harmn) (=>(^(S#PHYSICAL-HARM x :0.2)(SS#PHYSICAL-HARM-TYPE x :0.2))(harm-nn e0 x)))
(B (name torturen) (=>(^(S#PHYSICAL-HARM x :0.2)(SS#PHYSICAL-HARM-TYPE x :0.2))(torture-nn e0 x)))
(B (name maimn) (=>(^(S#PHYSICAL-HARM x :0.2)(SS#PHYSICAL-HARM-TYPE x :0.2))(maim-nn e0 x)))
(B (name trauman) (=>(^(S#PHYSICAL-HARM x :0.2)(SS#PHYSICAL-HARM-TYPE x :0.2))(trauma-nn e0 x)))
(B (name injuryn) (=>(^(S#PHYSICAL-HARM x :0.2)(SS#PHYSICAL-HARM-TYPE x :0.2))(injury-nn e0 x)))
(B (name screwn) (=>(^(S#PHYSICAL-HARM x :0.2)(SS#PHYSICAL-HARM-TYPE x :0.2))(screw-nn e0 x)))

(B (name crippling)(=>(^(S#PHYSICAL-HARM e0 :0.45)(SS#PHYSICAL-HARM-TYPE e0 :0.45)) (crippling-adj e0 x)))
(B (name soul-crushing)(=>(^(S#PHYSICAL-HARM e0 :0.45)(SS#PHYSICAL-HARM-TYPE e0 :0.45)) (soul-crushing-adj e0 x)))

(B (name physical-harm-map) (=>(I#PHYSICAL-HARM  x :0.9) (S#PHYSICAL-HARM x)))

;RESTRAINT
(B (name hobble)(=>(^(S#PHYSICAL-HARM e0 :0.23)(SS#PHYSICAL-HARM-RESTRAINT e0 :0.23)(R#HARM-AGENT x e0 :0.23)(R#HARM-VICTIM y e0 :0.23)) (hobble-vb e0 x y u)))
(B (name overwhelmed)(=>(^(S#PHYSICAL-HARM e0 :0.23)(SS#PHYSICAL-HARM-RESTRAINT e0 :0.23)(R#HARM-AGENT x e0 :0.23)(R#HARM-VICTIM y e0 :0.23)) (overwhelm-vb e0 x y u)))
(B (name hamstring)(=>(^(S#PHYSICAL-HARM e0 :0.23)(SS#PHYSICAL-HARM-RESTRAINT e0 :0.23)(R#HARM-AGENT x e0 :0.23)(R#HARM-VICTIM y e0 :0.23)) (hamstring-vb e0 x y u)))
(B (name held-back)(=>(^(S#PHYSICAL-HARM e0 :0.23)(SS#PHYSICAL-HARM-RESTRAINT e0 :0.23)(R#HARM-AGENT x e0 :0.23)(R#HARM-VICTIM y e0 :0.23)) (^(hold-vb e0 x y u)(back-rb e1 e0))))
(B (name bring-to-knees)(=>(^(S#PHYSICAL-HARM e0 :0.23)(SS#PHYSICAL-HARM-RESTRAINT e0 :0.23)(R#HARM-AGENT x e0 :0.23)(R#HARM-VICTIM y e0 :0.23)) (^(bring-vb e0 x y u)(to-in e1 e0 z) (knees-nn e2 z))))
(B (name bury)(=>(^(S#PHYSICAL-HARM z :0.23)(SS#PHYSICAL-HARM-RESTRAINT e0 :0.23)(R#HARM-AGENT x e0 :0.23)(R#HARM-VICTIM y e0 :0.23)) (bury-vb e0 x y u)))

(B (name restraint-map) (=>(I#PHYSICAL-HARM-RESTRAINT x :0.9) (SS#PHYSICAL-HARM-RESTRAINT x)))

;PROTECTION
(B (name shield) (=>(^(S#PHYSICAL-HARM u :0.45)(SS#PHYSICAL-PROTECTION x :0.45))(shield-nn e0 x)))
(B (name shelter) (=>(^(S#PHYSICAL-HARM u :0.45)(SS#PHYSICAL-PROTECTION x :0.45))(shelter-nn e0 x)))

(B (name shieldvb) (=>(^(S#PHYSICAL-HARM u :0.2)(SS#PHYSICAL-PROTECTION e0 :0.2)(R#PROTECT-PATIENT y e0 :0.2)(R#PROTECT-AGENT x e0 :0.2))(shield-vb e0 x y u2)))

(B (name restraint-map) (=>(I#PHYSICAL-PROTECTION x :0.9) (SS#PHYSICAL-PROTECTION x)))

; MAZE
; Katya and Ross decided to change these based on illogical output
(B (name maze)(=>(^(S#MAZE e0 :0.45)(SS#CONFUSING-PATHWAYS x :0.45))(maze-nn e0 x)))
(B (name labyrinth)(=>(^(S#MAZE e0 :0.45)(SS#CONFUSING-PATHWAYS x :0.45))(labyrinth-nn e0 x)))

; NAVIGATION

(B (name navigate) (=>(^(S#MAZE z :0.3) (SS#NAVIGATION e0 :0.3)(R#NAVIGATION-AGENT x e0 :0.3))(navigate-vb e0 x y u)))

(B (name mazemap)(=>(I#MAZE x :0.9)(S#MAZE x)))
(B (name navigatemap)(=>(I#NAVIGATION x :0.9)(SS#NAVIGATION x)))

; OBSTRUCTION
(B (name tangle)(=>(^(S#MAZE e0 :0.45)(SS#OBSTRUCTION x :0.45)) (tangle-nn e0 x)))
(B (name snarl)(=>(^(S#MAZE e0 :0.45)(SS#OBSTRUCTION x :0.45)) (snarl-nn e0 x)))
(B (name catch)(=>(^(S#MAZE e0 :0.45)(SS#OBSTRUCTION x :0.45)) (catch-nn e0 x)))

(B (name catchvb)(=>(^(S#MAZE z :0.23)(SS#OBSTRUCTION e0 :0.23)(R#OBSTRUCTION-AGENT x e0 :0.23)(R#OBSTRUCTION-PATIENT y e0 :0.23)) (catch-vb e0 x y u)))
(B (name tanglevb)(=>(^(S#MAZE z :0.3)(SS#OBSTRUCTION e0 :0.3)(R#OBSTRUCTION-PATIENT y e0 :0.3)) (tangle-vb e0 u y u1)))
(B (name snarlvb)(=>(^(S#MAZE z :0.3)(SS#OBSTRUCTION e0 :0.3)(R#OBSTRUCTION-PATIENT y e0 :0.3)) (snarl-vb e0 u y u1)))

; CONFUSING PATHWAYS
(B (name web)(=>(^(S#MAZE e0 :0.45)(SS#CONFUSING-PATHWAYS x :0.45)) (web-nn e0 x)))
(B (name knot)(=>(^(S#MAZE e0 :0.45)(SS#CONFUSING-PATHWAYS x :0.45)) (knot-nn e0 x)))

; LOW POINT 
; BOTTOM OF ECONOMIC SCALE
(B (name the-pits) (=>(^(S#LOW-POINT e0 :0.45)(SS#BOTTOM-OF-ECON-SCALE x :0.45))(pits-nn e0 x)))
(B (name low) (=>(^(S#LOW-POINT e0 :0.45)(SS#BOTTOM-OF-ECON-SCALE x :0.45))(low-nn e0 x)))
(B (name rock-bottom) (=>(^(S#LOW-POINT e2 :0.45)(SS#BOTTOM-OF-ECON-SCALE y :0.45))(^(rock-nn e0 x)(of-in e1 y x)(bottom-nn e2 y))))
(B (name bottom-of-the-heap) (=>(^(S#LOW-POINT e0 :0.45)(SS#BOTTOM-OF-ECON-SCALE x :0.45))(^(bottom-nn e0 x)(of-in e1 x y)(heap-nn e2 y))))
(B (name bottom-of-the-totem-pole) (=>(^(S#LOW-POINT e0 :0.45)(SS#BOTTOM-OF-ECON-SCALE x :0.45))(^(bottom-nn e0 x)(of-in e1 x z)(totem-nn e2 y)(pole-nn e3 z))))

;MOVEMENT DOWNWARD
(B (name slide) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(slide-vb e0 x u u1)))
(B (name drop) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(drop-vb e0 x u u1)))
(B (name slip) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(slip-vb e0 x u u1)))
(B (name fall) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(fall-vb e0 x u u1)))
(B (name tumble) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(tumble-vb e0 x u u1)))
(B (name plummet) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(plummet-vb e0 x u u1)))
(B (name sink) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(sink-vb e0 x u u1)))
(B (name plunge) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(plunge-vb e0 x u u1)))
(B (name deg-self-deeper) (=>(^(S#LOW-POINT u :0.3)(SS#MOVEMENT-DOWNWARD e0 :0.3)(R#MOVE-D-PATIENT x e0 :0.3))(^(dig-vb e0 x u u1)(deeper-adj e1 y))))

;MOVEMENT UPWARD
(B (name hover-above) (=>(^(S#LOW-POINT a :0.3)(SS#MOVEMENT-UPWARD e0 :0.3)(R#MOVE-U-PATIENT x e0 :0.3))(^(hover-vb e0 x u u1)(above-in e1 e0 y))))
(B (name rise-above) (=>(^(S#LOW-POINT a :0.3)(SS#MOVEMENT-UPWARD e0 :0.3)(R#MOVE-U-PATIENT x e0 :0.3))(^(rise-vb e0 x u u1)(above-in e1 e0 y))))
(B (name rise-from) (=>(^(S#LOW-POINT a :0.3)(SS#MOVEMENT-UPWARD e0 :0.3)(R#MOVE-U-PATIENT x e0 :0.3))(^(rise-vb e0 x u u1)(from-in e1 e0 y))))
(B (name rise-up-from) (=>(^(S#LOW-POINT a :0.3)(SS#MOVEMENT-UPWARD e0 :0.3)(R#MOVE-U-PATIENT x e0 :0.3))(^(rise-vb e0 x u u1)(up-in e1 e0 e2)(from-in e2 e1 y))))
(B (name rise) (=>(^(S#LOW-POINT a :0.3)(SS#MOVEMENT-UPWARD e0 :0.3)(R#MOVE-U-PATIENT x e0 :0.3))(rise-vb e0 x u u1)))
(B (name leap) (=>(^(S#LOW-POINT a :0.3)(SS#MOVEMENT-UPWARD e0 :0.3)(R#MOVE-U-PATIENT x e0 :0.3))(leap-vb e0 x u u1)))
(B (name skyrocket) (=>(^(S#LOW-POINT a :0.3)(SS#MOVEMENT-UPWARD e0 :0.3)(R#MOVE-U-PATIENT x e0 :0.3))(skyrocket-vb e0 x u u1)))
(B (name jump) (=>(^(S#LOW-POINT a :0.3)(SS#MOVEMENT-UPWARD e0 :0.3)(R#MOVE-U-PATIENT x e0 :0.3))(jump-vb e0 x u u1)))

(B (name lowpointmap)(=>(I#LOW-POINT x :0.9)(S#LOW-POINT x)))
(B (name bottom-of-econ-scale-map)(=>(I#BOTTOM-OF-ECON-SCALE x :0.9)(SS#BOTTOM-OF-ECON-SCALE x)))
(B (name movement-downwardmap)(=>(I#MOVEMENT-DOWNWARD x :0.9)(SS#MOVEMENT-DOWNWARD x)))
(B (name movement-upwardmap)(=>(I#MOVEMENT-UPWARD x :0.9)(SS#MOVEMENT-UPWARD x)))

: RESOURCE
; SUBSTANCE

;QUANTITY

;DEVELOP RESOURCES
(B (name invest)(=>(^(S#RESOURCE e0 :0.3)(SS#DEVELOP-RESOURCES x :0.3)(R#DEVELOPER x e0 :0.3)) (invest-vb e0 x y u)))

;DISTRIBUTION
(B (name transfer)(=>(^(S#RESOURCE e0 :0.45)(SS#DISTRIBUTION x :0.45)) (transfer-vb e0 x y u)))

(B (name distributionmap)(=>(I#DISTRIBUTION x :0.9)(SS#DISTRIBUTION x)))
(B (name develop-resourcesmap)(=>(I#DEVELOP-RESOURCES x :0.9)(SS#DEVELOP-RESOURCES x)))
(B (name resourcemap)(=>(I#RESOURCE x :0.9)(SS#RESOURCE x)))

;HUMAN-BODY
;DEATH
(B (name dying)(=>(^(S#HUMAN-BODY e0 :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (die-vb e0 x y u)))
(B (name breathe-last-breath)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (^(breathe-vb e0 x y u)(last-adj e1 y)(breath-nn e2 y))))
(B (name buy-the-farm)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (^(buy-vb e0 x y u)(farm-nn e1 y))))
(B (name croak)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (croak-vb e0 x y u)))
(B (name decay)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (decay-vb e0 x y u)))
(B (name expire)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (expire-vb e0 x y u)))
(B (name pass-away)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (^(pass-vb e0 x y u)(away-rb e1 e0))))
(B (name perish)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (perish-vb e0 x y u)))
(B (name rot)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (rot-vb e0 x y u)))
(B (name rot-away)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (^(rot-vb e0 x y u)(away-rb e1 e0))))
(B (name take-last-breath)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (^(take-vb e0 x y u)(last-adj e1 y)(breath-nn e2 y))))
(B (name wither)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (wither-vb e0 x y u)))

(B (name dead)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (dead-adj e0 x)))
(B (name deceased)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (deceased-adj e0 x)))

(B (name death)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH x :0.3)(R#DEATH-PATIENT x e0 :0.3)) (death-nn e0 x)))
(B (name deceasedn)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH e0 :0.3)(R#DEATH-PATIENT x e0 :0.3)) (deceased-nn e0 x)))
(B (name fatality)(=>(^(S#HUMAN-BODY x :0.3)(SS#DEATH x :0.3)(R#DEATH-PATIENT x e0 :0.3)) (fatality-nn e0 x)))

;LIVING
(B (name live)(=>(^(S#HUMAN-BODY e0 :0.3)(SS#LIVING x :0.3)(R#LIVING-PATIENT x e0 :0.3)) (live-vb e0 x y u)))
(B (name thrive)(=>(^(S#HUMAN-BODY e0 :0.3)(SS#LIVING x :0.3)(R#LIVING-PATIENT x e0 :0.3)) (thrive-vb e0 x y u)))
(B (name flourish)(=>(^(S#HUMAN-BODY e0 :0.3)(SS#LIVING x :0.3)(R#LIVING-PATIENT x e0 :0.3)) (flourish-vb e0 x y u)))

(B (name alive)(=>(^(S#HUMAN-BODY x :0.3)(SS#LIVING e0 :0.3)(R#LIVING-PATIENT x e0 :0.3)) (alive-adj e0 y)))

;HEALTH
(B (name reviving)(=>(^(S#HUMAN-BODY e0 :0.3)(SS#HEALTH x :0.3)(R#DEATH-PATIENT x e0 :0.3)) (revive-vb e0 x y u)))

(B (name human-bodymap)(=>(I#HUMAN-BODY x :0.9)(S#HUMAN-BODY x)))
(B (name deathmap)(=>(I#DEATH x :0.9)(SS#DEATH x)))
(B (name livingmap)(=>(I#LIVING x :0.9)(SS#LIVING x)))
(B (name healthmap)(=>(I#HEALTH x :0.9)(SS#HEALTH x)))

;VICTIM
;SUFFERER
(B (name threatened)(=>(^(S#VICTIM e0 :0.3)(SS#SUFFERER x :0.3)(R#VICTIMIZE-PATIENT x e0 :0.3)) (threatened-adj e0 x)))
(B (name victim)(=>(^(S#VICTIM x :0.3)(SS#SUFFERER x :0.3)(R#VICTIMIZE-PATIENT x e0 :0.3)) (victim-nn e0 x)))
(B (name prey)(=>(^(S#VICTIM x :0.3)(SS#SUFFERER x :0.3)(R#VICTIMIZE-PATIENT x e0 :0.3)) (prey-nn e0 x)))
(B (name sufferer)(=>(^(S#VICTIM x :0.3)(SS#SUFFERER x:0.3)(R#VICTIMIZE-PATIENT x e0 :0.3)) (sufferer-nn e0 x)))

;VICTIMIZER
(B (name vampire)(=>(^(S#VICTIM z :0.3)(SS#VICTIMIZER x :0.3)(R#VICTIMIZE-AGENT x e0 :0.3)) (vampire-nn e0 x)))
(B (name victimizer)(=>(^(S#VICTIM z :0.3)(SS#VICTIMIZER x :0.3)(R#VICTIMIZE-AGENT x e0 :0.3)) (victimizer-nn e0 x)))
(B (name dracula)(=>(^(S#VICTIM z :0.3)(SS#VICTIMIZER x :0.3)(R#VICTIMIZE-AGENT x e0 :0.3)) (dracula-nn e0 x)))

(B (name victimize)(=>(^(S#VICTIM x :0.3)(SS#VICTIMIZER e0 :0.3)(R#VICTIMIZE-AGENT x e0 :0.3)) (victimize-vb e0 x y u)))

;CHAMPION
(B (name champion)(=>(^(S#VICTIM x :0.3)(SS#CHAMPION x :0.3)(R#CHAMPION y e0 :0.3)) (champion-nn e0 x)))
(B (name knight)(=>(^(S#VICTIM x :0.3)(SS#CHAMPION x :0.3)(R#CHAMPION y e0 :0.3)) (knight-nn e0 x)))
(B (name superman)(=>(^(S#VICTIM x :0.3)(SS#CHAMPION x :0.3)(R#CHAMPION y e0 :0.3)) (superman-nn e0 x)))
(B (name superhero)(=>(^(S#VICTIM x :0.3)(SS#CHAMPION x :0.3)(R#CHAMPION y e0 :0.3)) (superhero-nn e0 x)))

(B (name victimmap)(=>(I#VICTIM x :0.9)(S#VICTIM x)))
(B (name sufferermap)(=>(I#SUFFERER x :0.9)(SS#SUFFERER x)))
(B (name victimizermap)(=>(I#VICTIMIZER x :0.9)(SS#VICTIMIZER x)))
(B (name championmap)(=>(I#CHAMPION x :0.9)(SS#CHAMPION x)))

; BUILDING
; STRUCTURE
(B (name building)(=>(^(S#STRUCTURE x :0.45)(SS#BUILDING x :0.45)) (building-nn e0 x)))
(B (name edifice)(=>(^(S#STRUCTURE x :0.45)(SS#BUILDING x :0.45)) (edifice-nn e0 x)))
(B (name foundation)(=>(^(S#STRUCTURE x :0.45)(SS#BUILDING x :0.45)) (foundation-nn e0 x)))
(B (name base)(=>(^(S#BUILDING x :0.45)(SS#STRUCTURE x :0.45)) (base-nn e0 x)))
(B (name basement)(=>(^(S#BUILDING x :0.45)(SS#STRUCTURE x :0.45)) (basement-nn e0 x)))
(B (name house)(=>(^(S#BUILDING x :0.45)(SS#STRUCTURE x :0.45)) (house-nn e0 x)))
(B (name home)(=>(^(S#BUILDING x :0.45)(SS#STRUCTURE x :0.45)) (home-nn e0 x)))
(B (name support-structure)(=>(^(S#BUILDING x :0.45)(SS#STRUCTURE x :0.45)) (^(support-nn e0 x)(of-in e1 y x)(structure-nn e2 y))))
(B (name structure)(=>(^(S#BUILDING x :0.45)(SS#STRUCTURE x :0.45)) (structure-nn e0 x)))


; CREATION
(B (name build)(=>(^(S#BUILDINGx :0.45)(SS#CREATION e0 :0.45)) (build-vb e0 x y u)))
(B (name construct)(=>(^(S#BUILDINGx :0.45)(SS#CREATION e0 :0.45)) (construct-vb e0 x y u)))
(B (name construction)(=>(^(S#BUILDING x :0.45)(SS#CREATION x :0.45)) (construction-nn e0 x)))

; COMPONENTS
(B (name building-block)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (^(building-nn e0 x)(of-in e1 y x)(block-nn e2 y))))
(B (name support-beam)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (^(support-nn e0 x)(of-in e1 y x)(beam-nn e2 y))))
(B (name cement)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (cement-nn e0 x)))
(B (name brick)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (brick-nn e0 x)))
(B (name concrete)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (concrete-nn e0 x)))
(B (name mortar)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (mortar-nn e0 x)))
(B (name sand)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (sand-nn e0 x)))
(B (name stone)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (stone-nn e0 x)))
(B (name wall)(=>(^(S#BUILDING x :0.45)(SS#COMPONENTS x :0.45)) (wall-nn e0 x)))

(B (name buildingmap)(=>(I#BUILDING x :0.9)(S#BUILDING x)))
(B (name structuremap)(=>(I#STRUCTURE x :0.9)(SS#STRUCTURE x)))
(B (name creationmap)(=>(I#CREATION x :0.9)(SS#CREATION x)))
(B (name componentsmap)(=>(I#COMPONENTS x :0.9)(SS#COMPONENTS x)))

; PATHWAY
; TYPE
(B (name pathway)(=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (pathway-nn e0 x)))
(B (name road-to)(=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (^(road-nn e0 x)(to-in e1 x z))))
(B (name path)(=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (path-nn e0 x)))
(B (name bridge)(=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (bridge-nn e0 x)))
(B (name passage)(=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (passage-nn e0 x)))
(B (name route)(=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (route-nn e0 x)))
(B (name street)(=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (street-nn e0 x)))
(B (name trail)(=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (trail-nn e0 x)))
(B (name way-out) (=>(^(S#PATHWAY x :0.45)(SS#PATHWAY-TYPE x :0.45)) (^(way-nn e0 x)(out-in e1 x u))))

;OPEN PATH
(B (name clear-path) (=>(SS#OPEN-PATH e0 :0.90) (^(clear-adj e0 x)(SS#PATHWAY-TYPE x))))

;OBSTRUCTED PATH

(B (name pathwaymap)(=>(I#PATHWAY x :0.9)(S#PATHWAY x)))
(B (name pathway-typemap)(=>(I#PATHWAY-TYPE x :0.9)(SS#PATHWAY-TYPE x)))
(B (name open-pathmap)(=>(I#OPEN-PATH x :0.9)(SS#OPEN-PATH x)))
(B (name obstructed-pathmap)(=>(I#OBSTRUCTED-PATH x :0.9)(SS#OBSTRUCTED-PATH x)))
